### YamlMime:ManagedReference
items:
- uid: AetherUtils.Core.Security.Passwords.PasswordRule
  commentId: T:AetherUtils.Core.Security.Passwords.PasswordRule
  id: PasswordRule
  parent: AetherUtils.Core.Security.Passwords
  children:
  - AetherUtils.Core.Security.Passwords.PasswordRule.#ctor(System.Boolean)
  - AetherUtils.Core.Security.Passwords.PasswordRule.#ctor(System.String)
  - AetherUtils.Core.Security.Passwords.PasswordRule.AddCharacter(System.Text.StringBuilder@,System.Int32@,System.Int32@,System.Int32@)
  - AetherUtils.Core.Security.Passwords.PasswordRule.AddNumber(System.Text.StringBuilder@,System.Int32@,System.Int32@)
  - AetherUtils.Core.Security.Passwords.PasswordRule.AddSpecial(System.Text.StringBuilder@,System.Int32@,System.Int32@)
  - AetherUtils.Core.Security.Passwords.PasswordRule.AddWhiteSpace(System.Text.StringBuilder@,System.Int32@)
  - AetherUtils.Core.Security.Passwords.PasswordRule.AllowNumbers
  - AetherUtils.Core.Security.Passwords.PasswordRule.AllowSpecials
  - AetherUtils.Core.Security.Passwords.PasswordRule.AllowWhiteSpace
  - AetherUtils.Core.Security.Passwords.PasswordRule.CompileRules
  - AetherUtils.Core.Security.Passwords.PasswordRule.Encryptor
  - AetherUtils.Core.Security.Passwords.PasswordRule.Expires(System.DateTime)
  - AetherUtils.Core.Security.Passwords.PasswordRule.FinishedBuilding
  - AetherUtils.Core.Security.Passwords.PasswordRule.FromEncryptedString(System.String,System.String)
  - AetherUtils.Core.Security.Passwords.PasswordRule.GetSelector(System.Int32,System.Int32,System.Int32,System.Int32)
  - AetherUtils.Core.Security.Passwords.PasswordRule.GetValidPassword
  - AetherUtils.Core.Security.Passwords.PasswordRule.MinimumLength(System.Int32)
  - AetherUtils.Core.Security.Passwords.PasswordRule.MinimumNumberCount(System.Int32)
  - AetherUtils.Core.Security.Passwords.PasswordRule.MinimumSpecialCount(System.Int32)
  - AetherUtils.Core.Security.Passwords.PasswordRule.New
  - AetherUtils.Core.Security.Passwords.PasswordRule.Parse(System.String)
  - AetherUtils.Core.Security.Passwords.PasswordRule.ParseFromFileAsync(System.String,System.String)
  - AetherUtils.Core.Security.Passwords.PasswordRule.PasswordRules
  - AetherUtils.Core.Security.Passwords.PasswordRule.RuleData
  - AetherUtils.Core.Security.Passwords.PasswordRule.SaveToFileAsync(System.String,System.String)
  - AetherUtils.Core.Security.Passwords.PasswordRule.Serializer
  - AetherUtils.Core.Security.Passwords.PasswordRule.ToEncryptedString(System.String)
  - AetherUtils.Core.Security.Passwords.PasswordRule.ToJsonString
  - AetherUtils.Core.Security.Passwords.PasswordRule.ToString
  - AetherUtils.Core.Security.Passwords.PasswordRule.Validate(System.String)
  - AetherUtils.Core.Security.Passwords.PasswordRule._isBuilding
  - AetherUtils.Core.Security.Passwords.PasswordRule._isBuilt
  langs:
  - csharp
  - vb
  name: PasswordRule
  nameWithType: PasswordRule
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule
  type: Class
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: PasswordRule
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 19
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: >-
    Represents a password rule with various options. A password rule should be built using the

    Rule Builder factory: <xref href="AetherUtils.Core.Security.Passwords.IPasswordRuleBuilder" data-throw-if-not-resolved="false"></xref>.

    <p>This class contains methods to parse and save a password rule to/from a file as well as a

    string.</p>

    <remarks>A password can be validated against a rule using <xref href="AetherUtils.Core.Security.Passwords.PasswordRule.Validate(System.String)" data-throw-if-not-resolved="false"></xref>.</remarks>
  example: []
  syntax:
    content: public sealed class PasswordRule
    content.vb: Public NotInheritable Class PasswordRule
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - AetherUtils.Core.Security.Passwords.PasswordRule.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1
  - AetherUtils.Core.Security.Passwords.PasswordRule.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1
  - AetherUtils.Core.Security.Passwords.PasswordRule.AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1
  - AetherUtils.Core.Security.Passwords.PasswordRule.AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1
- uid: AetherUtils.Core.Security.Passwords.PasswordRule._isBuilding
  commentId: F:AetherUtils.Core.Security.Passwords.PasswordRule._isBuilding
  id: _isBuilding
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: _isBuilding
  nameWithType: PasswordRule._isBuilding
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule._isBuilding
  type: Field
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: _isBuilding
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 21
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  syntax:
    content: private bool _isBuilding
    return:
      type: System.Boolean
    content.vb: Private _isBuilding As Boolean
- uid: AetherUtils.Core.Security.Passwords.PasswordRule._isBuilt
  commentId: F:AetherUtils.Core.Security.Passwords.PasswordRule._isBuilt
  id: _isBuilt
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: _isBuilt
  nameWithType: PasswordRule._isBuilt
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule._isBuilt
  type: Field
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: _isBuilt
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 22
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  syntax:
    content: private bool _isBuilt
    return:
      type: System.Boolean
    content.vb: Private _isBuilt As Boolean
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.RuleData
  commentId: F:AetherUtils.Core.Security.Passwords.PasswordRule.RuleData
  id: RuleData
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: RuleData
  nameWithType: PasswordRule.RuleData
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.RuleData
  type: Field
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: RuleData
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 24
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  syntax:
    content: internal PasswordRuleData RuleData
    return:
      type: AetherUtils.Core.Security.Passwords.PasswordRuleData
    content.vb: Friend RuleData As PasswordRuleData
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.Serializer
  commentId: F:AetherUtils.Core.Security.Passwords.PasswordRule.Serializer
  id: Serializer
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: Serializer
  nameWithType: PasswordRule.Serializer
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.Serializer
  type: Field
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: Serializer
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 26
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  syntax:
    content: private static readonly Json<PasswordRuleData> Serializer
    return:
      type: AetherUtils.Core.Files.Json{AetherUtils.Core.Security.Passwords.PasswordRuleData}
    content.vb: Private Shared ReadOnly Serializer As Json(Of PasswordRuleData)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.Encryptor
  commentId: F:AetherUtils.Core.Security.Passwords.PasswordRule.Encryptor
  id: Encryptor
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: Encryptor
  nameWithType: PasswordRule.Encryptor
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.Encryptor
  type: Field
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: Encryptor
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 27
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  syntax:
    content: private static readonly StringEncryptionService Encryptor
    return:
      type: AetherUtils.Core.Security.Encryption.StringEncryptionService
    content.vb: Private Shared ReadOnly Encryptor As StringEncryptionService
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.PasswordRules
  commentId: P:AetherUtils.Core.Security.Passwords.PasswordRule.PasswordRules
  id: PasswordRules
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: PasswordRules
  nameWithType: PasswordRule.PasswordRules
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.PasswordRules
  type: Property
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: PasswordRules
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 32
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Get the string representing this password rule.
  example: []
  syntax:
    content: public string PasswordRules { get; private set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property PasswordRules As String
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.PasswordRules*
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.#ctor(System.Boolean)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: PasswordRule(bool)
  nameWithType: PasswordRule.PasswordRule(bool)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.PasswordRule(bool)
  type: Constructor
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: .ctor
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 34
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  syntax:
    content: internal PasswordRule(bool isBuilt)
    parameters:
    - id: isBuilt
      type: System.Boolean
    content.vb: Friend Sub New(isBuilt As Boolean)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.#ctor*
  nameWithType.vb: PasswordRule.New(Boolean)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.New(Boolean)
  name.vb: New(Boolean)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.#ctor(System.String)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: PasswordRule(string)
  nameWithType: PasswordRule.PasswordRule(string)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.PasswordRule(string)
  type: Constructor
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: .ctor
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 40
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  syntax:
    content: private PasswordRule(string json)
    parameters:
    - id: json
      type: System.String
    content.vb: Private Sub New(json As String)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.#ctor*
  nameWithType.vb: PasswordRule.New(String)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.New(String)
  name.vb: New(String)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.New
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.New
  id: New
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: New()
  nameWithType: PasswordRule.New()
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.New()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: New
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 56
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Start building the password rule.
  example: []
  syntax:
    content: public static IPasswordRuleBuilder New()
    return:
      type: AetherUtils.Core.Security.Passwords.IPasswordRuleBuilder
      description: The builder instance.
    content.vb: Public Shared Function [New]() As IPasswordRuleBuilder
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.New*
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AllowWhiteSpace
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.AllowWhiteSpace
  id: AllowWhiteSpace
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: AllowWhiteSpace()
  nameWithType: PasswordRule.AllowWhiteSpace()
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AllowWhiteSpace()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: AllowWhiteSpace
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 62
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Allows a password to contain whitespace.
  example: []
  syntax:
    content: internal void AllowWhiteSpace()
    content.vb: Friend Sub AllowWhiteSpace()
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.AllowWhiteSpace*
  exceptions:
  - type: AetherUtils.Core.Exceptions.PasswordRuleException
    commentId: T:AetherUtils.Core.Exceptions.PasswordRuleException
    description: If the password rule is not being built.
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AllowSpecials
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.AllowSpecials
  id: AllowSpecials
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: AllowSpecials()
  nameWithType: PasswordRule.AllowSpecials()
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AllowSpecials()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: AllowSpecials
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 73
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Allows a password to contain special characters.
  example: []
  syntax:
    content: internal void AllowSpecials()
    content.vb: Friend Sub AllowSpecials()
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.AllowSpecials*
  exceptions:
  - type: AetherUtils.Core.Exceptions.PasswordRuleException
    commentId: T:AetherUtils.Core.Exceptions.PasswordRuleException
    description: If the password rule is not being built.
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AllowNumbers
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.AllowNumbers
  id: AllowNumbers
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: AllowNumbers()
  nameWithType: PasswordRule.AllowNumbers()
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AllowNumbers()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: AllowNumbers
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 84
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Allows a password to contain numbers.
  example: []
  syntax:
    content: internal void AllowNumbers()
    content.vb: Friend Sub AllowNumbers()
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.AllowNumbers*
  exceptions:
  - type: AetherUtils.Core.Exceptions.PasswordRuleException
    commentId: T:AetherUtils.Core.Exceptions.PasswordRuleException
    description: If the password rule is not being built.
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumLength(System.Int32)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.MinimumLength(System.Int32)
  id: MinimumLength(System.Int32)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: MinimumLength(int)
  nameWithType: PasswordRule.MinimumLength(int)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumLength(int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: MinimumLength
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 97
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Set the minimum length a password should be.
  example: []
  syntax:
    content: internal void MinimumLength(int length)
    parameters:
    - id: length
      type: System.Int32
      description: The length the password should be.
    content.vb: Friend Sub MinimumLength(length As Integer)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumLength*
  exceptions:
  - type: AetherUtils.Core.Exceptions.PasswordRuleException
    commentId: T:AetherUtils.Core.Exceptions.PasswordRuleException
    description: >-
      If the password rule is not being built or
          <code class="paramref">length</code> is less than 0.
  nameWithType.vb: PasswordRule.MinimumLength(Integer)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumLength(Integer)
  name.vb: MinimumLength(Integer)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumNumberCount(System.Int32)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.MinimumNumberCount(System.Int32)
  id: MinimumNumberCount(System.Int32)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: MinimumNumberCount(int)
  nameWithType: PasswordRule.MinimumNumberCount(int)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumNumberCount(int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: MinimumNumberCount
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 113
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Set the minimum count of numbers a password should contain.
  example: []
  syntax:
    content: internal void MinimumNumberCount(int count)
    parameters:
    - id: count
      type: System.Int32
      description: The minimum count of numbers the password should contain.
    content.vb: Friend Sub MinimumNumberCount(count As Integer)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumNumberCount*
  exceptions:
  - type: AetherUtils.Core.Exceptions.PasswordRuleException
    commentId: T:AetherUtils.Core.Exceptions.PasswordRuleException
    description: >-
      If the password rule is not being built or
          <code class="paramref">count</code> is less than 0.
  nameWithType.vb: PasswordRule.MinimumNumberCount(Integer)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumNumberCount(Integer)
  name.vb: MinimumNumberCount(Integer)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumSpecialCount(System.Int32)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.MinimumSpecialCount(System.Int32)
  id: MinimumSpecialCount(System.Int32)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: MinimumSpecialCount(int)
  nameWithType: PasswordRule.MinimumSpecialCount(int)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumSpecialCount(int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: MinimumSpecialCount
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 129
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Set the minimum count of special characters a password should contain.
  example: []
  syntax:
    content: internal void MinimumSpecialCount(int count)
    parameters:
    - id: count
      type: System.Int32
      description: The minimum count of special characters the password should contain.
    content.vb: Friend Sub MinimumSpecialCount(count As Integer)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumSpecialCount*
  exceptions:
  - type: AetherUtils.Core.Exceptions.PasswordRuleException
    commentId: T:AetherUtils.Core.Exceptions.PasswordRuleException
    description: >-
      If the password rule is not being built or
          <code class="paramref">count</code> is less than 0.
  nameWithType.vb: PasswordRule.MinimumSpecialCount(Integer)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumSpecialCount(Integer)
  name.vb: MinimumSpecialCount(Integer)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.Expires(System.DateTime)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.Expires(System.DateTime)
  id: Expires(System.DateTime)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: Expires(DateTime)
  nameWithType: PasswordRule.Expires(DateTime)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.Expires(System.DateTime)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: Expires
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 145
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Set the date that passwords should expire at.
  example: []
  syntax:
    content: internal void Expires(DateTime expires)
    parameters:
    - id: expires
      type: System.DateTime
      description: The expiration date of passwords validated against the rule.
    content.vb: Friend Sub Expires(expires As Date)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.Expires*
  exceptions:
  - type: AetherUtils.Core.Exceptions.PasswordRuleException
    commentId: T:AetherUtils.Core.Exceptions.PasswordRuleException
    description: >-
      If the password is not being built or
          <code class="paramref">expires</code> is outside of the range: <xref href="System.DateTime.MinValue" data-throw-if-not-resolved="false"></xref> to <xref href="System.DateTime.MaxValue" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: PasswordRule.Expires(Date)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.Expires(Date)
  name.vb: Expires(Date)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.FinishedBuilding
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.FinishedBuilding
  id: FinishedBuilding
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: FinishedBuilding()
  nameWithType: PasswordRule.FinishedBuilding()
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.FinishedBuilding()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: FinishedBuilding
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 159
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: >-
    Finish building the password rule and compile.

    After this method is called, no more parameters can be added to the password rule.
  example: []
  syntax:
    content: internal void FinishedBuilding()
    content.vb: Friend Sub FinishedBuilding()
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.FinishedBuilding*
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.CompileRules
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.CompileRules
  id: CompileRules
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: CompileRules()
  nameWithType: PasswordRule.CompileRules()
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.CompileRules()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: CompileRules
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 175
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  syntax:
    content: private void CompileRules()
    content.vb: Private Sub CompileRules()
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.CompileRules*
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.ToJsonString
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.ToJsonString
  id: ToJsonString
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: ToJsonString()
  nameWithType: PasswordRule.ToJsonString()
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.ToJsonString()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ToJsonString
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 177
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  syntax:
    content: private string ToJsonString()
    return:
      type: System.String
    content.vb: Private Function ToJsonString() As String
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.ToJsonString*
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.Parse(System.String)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.Parse(System.String)
  id: Parse(System.String)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: Parse(string)
  nameWithType: PasswordRule.Parse(string)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.Parse(string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: Parse
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 184
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Parse a password rule from a Json string.
  example: []
  syntax:
    content: public static PasswordRule Parse(string json)
    parameters:
    - id: json
      type: System.String
      description: The password rule as Json to parse.
    return:
      type: AetherUtils.Core.Security.Passwords.PasswordRule
      description: The <xref href="AetherUtils.Core.Security.Passwords.PasswordRule" data-throw-if-not-resolved="false"></xref> or <code>null</code> if parsing failed.
    content.vb: Public Shared Function Parse(json As String) As PasswordRule
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.Parse*
  nameWithType.vb: PasswordRule.Parse(String)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.Parse(String)
  name.vb: Parse(String)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.ToEncryptedString(System.String)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.ToEncryptedString(System.String)
  id: ToEncryptedString(System.String)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: ToEncryptedString(string)
  nameWithType: PasswordRule.ToEncryptedString(string)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.ToEncryptedString(string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ToEncryptedString
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 191
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Get an encrypted string representing this password rule.
  example: []
  syntax:
    content: public string ToEncryptedString(string passphrase)
    parameters:
    - id: passphrase
      type: System.String
      description: The passphrase used for encryption.
    return:
      type: System.String
      description: A base64 string representing the password rule.
    content.vb: Public Function ToEncryptedString(passphrase As String) As String
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.ToEncryptedString*
  nameWithType.vb: PasswordRule.ToEncryptedString(String)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.ToEncryptedString(String)
  name.vb: ToEncryptedString(String)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.FromEncryptedString(System.String,System.String)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.FromEncryptedString(System.String,System.String)
  id: FromEncryptedString(System.String,System.String)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: FromEncryptedString(string, string)
  nameWithType: PasswordRule.FromEncryptedString(string, string)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.FromEncryptedString(string, string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: FromEncryptedString
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 204
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Parse a password rule from an encrypted string.
  example: []
  syntax:
    content: public static PasswordRule FromEncryptedString(string encrypted, string passphrase)
    parameters:
    - id: encrypted
      type: System.String
      description: The encrypted password rule to parse.
    - id: passphrase
      type: System.String
      description: The passphrase used for decryption.
    return:
      type: AetherUtils.Core.Security.Passwords.PasswordRule
      description: The <xref href="AetherUtils.Core.Security.Passwords.PasswordRule" data-throw-if-not-resolved="false"></xref> or <code>null</code> if parsing failed.
    content.vb: Public Shared Function FromEncryptedString(encrypted As String, passphrase As String) As PasswordRule
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.FromEncryptedString*
  nameWithType.vb: PasswordRule.FromEncryptedString(String, String)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.FromEncryptedString(String, String)
  name.vb: FromEncryptedString(String, String)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.SaveToFileAsync(System.String,System.String)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.SaveToFileAsync(System.String,System.String)
  id: SaveToFileAsync(System.String,System.String)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: SaveToFileAsync(string, string)
  nameWithType: PasswordRule.SaveToFileAsync(string, string)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.SaveToFileAsync(string, string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SaveToFileAsync
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 218
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Save the encrypted password rule to a file.
  example: []
  syntax:
    content: public Task<bool> SaveToFileAsync(string filePath, string passphrase)
    parameters:
    - id: filePath
      type: System.String
      description: The path to the file to save; can contain Windows path variables (i.e., <code>%temp%</code>)
    - id: passphrase
      type: System.String
      description: The passphrase used for encryption.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: <code>true</code> if the password rule saved successfully; <code>false</code> otherwise.
    content.vb: Public Function SaveToFileAsync(filePath As String, passphrase As String) As Task(Of Boolean)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.SaveToFileAsync*
  nameWithType.vb: PasswordRule.SaveToFileAsync(String, String)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.SaveToFileAsync(String, String)
  name.vb: SaveToFileAsync(String, String)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.ParseFromFileAsync(System.String,System.String)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.ParseFromFileAsync(System.String,System.String)
  id: ParseFromFileAsync(System.String,System.String)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: ParseFromFileAsync(string, string)
  nameWithType: PasswordRule.ParseFromFileAsync(string, string)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.ParseFromFileAsync(string, string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ParseFromFileAsync
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 233
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Parse an encrypted password rule from a file.
  example: []
  syntax:
    content: public static Task<PasswordRule?> ParseFromFileAsync(string filePath, string passphrase)
    parameters:
    - id: filePath
      type: System.String
      description: The path to the file to load; can contain Windows path variables (i.e., <code>%temp%</code>)
    - id: passphrase
      type: System.String
      description: The passphrase used for decryption. Should be the same as the one used for encryption.
    return:
      type: System.Threading.Tasks.Task{AetherUtils.Core.Security.Passwords.PasswordRule}
      description: The <xref href="AetherUtils.Core.Security.Passwords.PasswordRule" data-throw-if-not-resolved="false"></xref> or <code>null</code> if parsing failed.
    content.vb: Public Shared Function ParseFromFileAsync(filePath As String, passphrase As String) As Task(Of PasswordRule)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.ParseFromFileAsync*
  nameWithType.vb: PasswordRule.ParseFromFileAsync(String, String)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.ParseFromFileAsync(String, String)
  name.vb: ParseFromFileAsync(String, String)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.GetValidPassword
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.GetValidPassword
  id: GetValidPassword
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: GetValidPassword()
  nameWithType: PasswordRule.GetValidPassword()
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.GetValidPassword()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetValidPassword
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 254
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Get a random, cryptographically strong password that follows the password rule.
  example: []
  syntax:
    content: public string GetValidPassword()
    return:
      type: System.String
      description: A new, random password that adheres to the password rule created.
    content.vb: Public Function GetValidPassword() As String
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.GetValidPassword*
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.GetSelector(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.GetSelector(System.Int32,System.Int32,System.Int32,System.Int32)
  id: GetSelector(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: GetSelector(int, int, int, int)
  nameWithType: PasswordRule.GetSelector(int, int, int, int)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.GetSelector(int, int, int, int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetSelector
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 312
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: >-
    Get a <xref href="AetherUtils.Core.Utility.ProportionalRandomSelector%601" data-throw-if-not-resolved="false"></xref> based on the supplied percentages.

    Each percentage indicates the likelihood for that character type to be chosen.
  example: []
  syntax:
    content: private ProportionalRandomSelector<CharacterType> GetSelector(int characterPercentage, int specialPercentage, int numberPercentage, int whiteSpacePercentage)
    parameters:
    - id: characterPercentage
      type: System.Int32
    - id: specialPercentage
      type: System.Int32
    - id: numberPercentage
      type: System.Int32
    - id: whiteSpacePercentage
      type: System.Int32
    return:
      type: AetherUtils.Core.Utility.ProportionalRandomSelector{AetherUtils.Core.Enums.CharacterType}
      description: >-
        A <xref href="AetherUtils.Core.Utility.ProportionalRandomSelector%601" data-throw-if-not-resolved="false"></xref> that can be used to select items
            based on percentages.
    content.vb: Private Function GetSelector(characterPercentage As Integer, specialPercentage As Integer, numberPercentage As Integer, whiteSpacePercentage As Integer) As ProportionalRandomSelector(Of CharacterType)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.GetSelector*
  nameWithType.vb: PasswordRule.GetSelector(Integer, Integer, Integer, Integer)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.GetSelector(Integer, Integer, Integer, Integer)
  name.vb: GetSelector(Integer, Integer, Integer, Integer)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AddWhiteSpace(System.Text.StringBuilder@,System.Int32@)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.AddWhiteSpace(System.Text.StringBuilder@,System.Int32@)
  id: AddWhiteSpace(System.Text.StringBuilder@,System.Int32@)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: AddWhiteSpace(ref StringBuilder, ref int)
  nameWithType: PasswordRule.AddWhiteSpace(ref StringBuilder, ref int)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AddWhiteSpace(ref System.Text.StringBuilder, ref int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: AddWhiteSpace
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 356
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Add a whitespace character to the random password, if allowed.
  example: []
  syntax:
    content: private void AddWhiteSpace(ref StringBuilder builder, ref int currentCount)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: ''
    - id: currentCount
      type: System.Int32
      description: ''
    content.vb: Private Sub AddWhiteSpace(builder As StringBuilder, currentCount As Integer)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.AddWhiteSpace*
  nameWithType.vb: PasswordRule.AddWhiteSpace(StringBuilder, Integer)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.AddWhiteSpace(System.Text.StringBuilder, Integer)
  name.vb: AddWhiteSpace(StringBuilder, Integer)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AddSpecial(System.Text.StringBuilder@,System.Int32@,System.Int32@)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.AddSpecial(System.Text.StringBuilder@,System.Int32@,System.Int32@)
  id: AddSpecial(System.Text.StringBuilder@,System.Int32@,System.Int32@)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: AddSpecial(ref StringBuilder, ref int, ref int)
  nameWithType: PasswordRule.AddSpecial(ref StringBuilder, ref int, ref int)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AddSpecial(ref System.Text.StringBuilder, ref int, ref int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: AddSpecial
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 374
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Add a special character to the random password, if allowed.
  example: []
  syntax:
    content: private bool AddSpecial(ref StringBuilder builder, ref int currentCount, ref int specialCount)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The current <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> reference.
    - id: currentCount
      type: System.Int32
      description: The current loop count reference.
    - id: specialCount
      type: System.Int32
      description: The current count of specials reference.
    return:
      type: System.Boolean
      description: <code>true</code> if the character was added; <code>false</code> otherwise.
    content.vb: Private Function AddSpecial(builder As StringBuilder, currentCount As Integer, specialCount As Integer) As Boolean
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.AddSpecial*
  nameWithType.vb: PasswordRule.AddSpecial(StringBuilder, Integer, Integer)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.AddSpecial(System.Text.StringBuilder, Integer, Integer)
  name.vb: AddSpecial(StringBuilder, Integer, Integer)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AddNumber(System.Text.StringBuilder@,System.Int32@,System.Int32@)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.AddNumber(System.Text.StringBuilder@,System.Int32@,System.Int32@)
  id: AddNumber(System.Text.StringBuilder@,System.Int32@,System.Int32@)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: AddNumber(ref StringBuilder, ref int, ref int)
  nameWithType: PasswordRule.AddNumber(ref StringBuilder, ref int, ref int)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AddNumber(ref System.Text.StringBuilder, ref int, ref int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: AddNumber
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 400
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Add a number to the random password, if allowed.
  example: []
  syntax:
    content: private bool AddNumber(ref StringBuilder builder, ref int currentCount, ref int numberCount)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The current <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> reference.
    - id: currentCount
      type: System.Int32
      description: The current loop count reference.
    - id: numberCount
      type: System.Int32
      description: The current count of numbers reference.
    return:
      type: System.Boolean
      description: <code>true</code> if the number was added; <code>false</code> otherwise.
    content.vb: Private Function AddNumber(builder As StringBuilder, currentCount As Integer, numberCount As Integer) As Boolean
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.AddNumber*
  nameWithType.vb: PasswordRule.AddNumber(StringBuilder, Integer, Integer)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.AddNumber(System.Text.StringBuilder, Integer, Integer)
  name.vb: AddNumber(StringBuilder, Integer, Integer)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AddCharacter(System.Text.StringBuilder@,System.Int32@,System.Int32@,System.Int32@)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.AddCharacter(System.Text.StringBuilder@,System.Int32@,System.Int32@,System.Int32@)
  id: AddCharacter(System.Text.StringBuilder@,System.Int32@,System.Int32@,System.Int32@)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: AddCharacter(ref StringBuilder, ref int, ref int, ref int)
  nameWithType: PasswordRule.AddCharacter(ref StringBuilder, ref int, ref int, ref int)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AddCharacter(ref System.Text.StringBuilder, ref int, ref int, ref int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: AddCharacter
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 426
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Add an alphabet character to the random password.
  example: []
  syntax:
    content: private void AddCharacter(ref StringBuilder builder, ref int currentCount, ref int numberCount, ref int specialCount)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The current <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> reference.
    - id: currentCount
      type: System.Int32
      description: The current loop count reference.
    - id: numberCount
      type: System.Int32
      description: The current count of numbers reference.
    - id: specialCount
      type: System.Int32
      description: The current count of specials reference.
    content.vb: Private Sub AddCharacter(builder As StringBuilder, currentCount As Integer, numberCount As Integer, specialCount As Integer)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.AddCharacter*
  nameWithType.vb: PasswordRule.AddCharacter(StringBuilder, Integer, Integer, Integer)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.AddCharacter(System.Text.StringBuilder, Integer, Integer, Integer)
  name.vb: AddCharacter(StringBuilder, Integer, Integer, Integer)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.Validate(System.String)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.Validate(System.String)
  id: Validate(System.String)
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: Validate(string)
  nameWithType: PasswordRule.Validate(string)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.Validate(string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: Validate
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 446
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Validate a password against the password rule.
  example: []
  syntax:
    content: public List<IPasswordValidationFailure> Validate(string password)
    parameters:
    - id: password
      type: System.String
      description: The password to validate.
    return:
      type: System.Collections.Generic.List{AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure}
      description: >-
        A list of <xref href="AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure" data-throw-if-not-resolved="false"></xref> containing the reasons the
            password failed to validate. If this list is empty, the password validated successfully.
    content.vb: Public Function Validate(password As String) As List(Of IPasswordValidationFailure)
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.Validate*
  nameWithType.vb: PasswordRule.Validate(String)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.Validate(String)
  name.vb: Validate(String)
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.ToString
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.ToString
  id: ToString
  parent: AetherUtils.Core.Security.Passwords.PasswordRule
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PasswordRule.ToString()
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.ToString()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Passwords/PasswordRule.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ToString
    path: ../AetherUtils.Core/Security/Passwords/PasswordRule.cs
    startLine: 452
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Passwords
  summary: Get the Json string representing this password rule.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: AetherUtils.Core.Security.Passwords.PasswordRule.ToString*
references:
- uid: AetherUtils.Core.Security.Passwords.IPasswordRuleBuilder
  commentId: T:AetherUtils.Core.Security.Passwords.IPasswordRuleBuilder
  parent: AetherUtils.Core.Security.Passwords
  href: AetherUtils.Core.Security.Passwords.IPasswordRuleBuilder.html
  name: IPasswordRuleBuilder
  nameWithType: IPasswordRuleBuilder
  fullName: AetherUtils.Core.Security.Passwords.IPasswordRuleBuilder
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.Validate(System.String)
  commentId: M:AetherUtils.Core.Security.Passwords.PasswordRule.Validate(System.String)
  isExternal: true
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_Validate_System_String_
  name: Validate(string)
  nameWithType: PasswordRule.Validate(string)
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.Validate(string)
  nameWithType.vb: PasswordRule.Validate(String)
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.Validate(String)
  name.vb: Validate(String)
  spec.csharp:
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule.Validate(System.String)
    name: Validate
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_Validate_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule.Validate(System.String)
    name: Validate
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_Validate_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: AetherUtils.Core.Security.Passwords
  commentId: N:AetherUtils.Core.Security.Passwords
  href: AetherUtils.html
  name: AetherUtils.Core.Security.Passwords
  nameWithType: AetherUtils.Core.Security.Passwords
  fullName: AetherUtils.Core.Security.Passwords
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Security
    name: Security
    href: AetherUtils.Core.Security.html
  - name: .
  - uid: AetherUtils.Core.Security.Passwords
    name: Passwords
    href: AetherUtils.Core.Security.Passwords.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Security
    name: Security
    href: AetherUtils.Core.Security.html
  - name: .
  - uid: AetherUtils.Core.Security.Passwords
    name: Passwords
    href: AetherUtils.Core.Security.Passwords.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  name: CanSerializeJson<PasswordRule>(PasswordRule)
  nameWithType: TypeExtensions.CanSerializeJson<PasswordRule>(PasswordRule)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson<AetherUtils.Core.Security.Passwords.PasswordRule>(AetherUtils.Core.Security.Passwords.PasswordRule)
  nameWithType.vb: TypeExtensions.CanSerializeJson(Of PasswordRule)(PasswordRule)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson(Of AetherUtils.Core.Security.Passwords.PasswordRule)(AetherUtils.Core.Security.Passwords.PasswordRule)
  name.vb: CanSerializeJson(Of PasswordRule)(PasswordRule)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(AetherUtils.Core.Security.Passwords.PasswordRule)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(AetherUtils.Core.Security.Passwords.PasswordRule)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  name: CanSerializeXml<PasswordRule>(PasswordRule)
  nameWithType: TypeExtensions.CanSerializeXml<PasswordRule>(PasswordRule)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml<AetherUtils.Core.Security.Passwords.PasswordRule>(AetherUtils.Core.Security.Passwords.PasswordRule)
  nameWithType.vb: TypeExtensions.CanSerializeXml(Of PasswordRule)(PasswordRule)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml(Of AetherUtils.Core.Security.Passwords.PasswordRule)(AetherUtils.Core.Security.Passwords.PasswordRule)
  name.vb: CanSerializeXml(Of PasswordRule)(PasswordRule)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(AetherUtils.Core.Security.Passwords.PasswordRule)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(AetherUtils.Core.Security.Passwords.PasswordRule)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  name: SerializeJson<PasswordRule>(PasswordRule)
  nameWithType: TypeExtensions.SerializeJson<PasswordRule>(PasswordRule)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson<AetherUtils.Core.Security.Passwords.PasswordRule>(AetherUtils.Core.Security.Passwords.PasswordRule)
  nameWithType.vb: TypeExtensions.SerializeJson(Of PasswordRule)(PasswordRule)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson(Of AetherUtils.Core.Security.Passwords.PasswordRule)(AetherUtils.Core.Security.Passwords.PasswordRule)
  name.vb: SerializeJson(Of PasswordRule)(PasswordRule)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(AetherUtils.Core.Security.Passwords.PasswordRule)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(AetherUtils.Core.Security.Passwords.PasswordRule)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  name: SerializeXml<PasswordRule>(PasswordRule)
  nameWithType: TypeExtensions.SerializeXml<PasswordRule>(PasswordRule)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml<AetherUtils.Core.Security.Passwords.PasswordRule>(AetherUtils.Core.Security.Passwords.PasswordRule)
  nameWithType.vb: TypeExtensions.SerializeXml(Of PasswordRule)(PasswordRule)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml(Of AetherUtils.Core.Security.Passwords.PasswordRule)(AetherUtils.Core.Security.Passwords.PasswordRule)
  name.vb: SerializeXml(Of PasswordRule)(PasswordRule)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(AetherUtils.Core.Security.Passwords.PasswordRule)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(AetherUtils.Core.Security.Passwords.PasswordRule)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  name: CanSerializeJson<T>(T)
  nameWithType: TypeExtensions.CanSerializeJson<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson<T>(T)
  nameWithType.vb: TypeExtensions.CanSerializeJson(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson(Of T)(T)
  name.vb: CanSerializeJson(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions
  commentId: T:AetherUtils.Core.Extensions.TypeExtensions
  parent: AetherUtils.Core.Extensions
  href: AetherUtils.Core.Extensions.TypeExtensions.html
  name: TypeExtensions
  nameWithType: TypeExtensions
  fullName: AetherUtils.Core.Extensions.TypeExtensions
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  name: CanSerializeXml<T>(T)
  nameWithType: TypeExtensions.CanSerializeXml<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml<T>(T)
  nameWithType.vb: TypeExtensions.CanSerializeXml(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml(Of T)(T)
  name.vb: CanSerializeXml(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  name: SerializeJson<T>(T)
  nameWithType: TypeExtensions.SerializeJson<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson<T>(T)
  nameWithType.vb: TypeExtensions.SerializeJson(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson(Of T)(T)
  name.vb: SerializeJson(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  name: SerializeXml<T>(T)
  nameWithType: TypeExtensions.SerializeXml<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml<T>(T)
  nameWithType.vb: TypeExtensions.SerializeXml(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml(Of T)(T)
  name.vb: SerializeXml(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions
  commentId: N:AetherUtils.Core.Extensions
  href: AetherUtils.html
  name: AetherUtils.Core.Extensions
  nameWithType: AetherUtils.Core.Extensions
  fullName: AetherUtils.Core.Extensions
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Extensions
    name: Extensions
    href: AetherUtils.Core.Extensions.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Extensions
    name: Extensions
    href: AetherUtils.Core.Extensions.html
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: AetherUtils.Core.Security.Passwords.PasswordRuleData
  commentId: T:AetherUtils.Core.Security.Passwords.PasswordRuleData
  parent: AetherUtils.Core.Security.Passwords
  href: AetherUtils.Core.Security.Passwords.PasswordRuleData.html
  name: PasswordRuleData
  nameWithType: PasswordRuleData
  fullName: AetherUtils.Core.Security.Passwords.PasswordRuleData
- uid: AetherUtils.Core.Files.Json{AetherUtils.Core.Security.Passwords.PasswordRuleData}
  commentId: T:AetherUtils.Core.Files.Json{AetherUtils.Core.Security.Passwords.PasswordRuleData}
  parent: AetherUtils.Core.Files
  definition: AetherUtils.Core.Files.Json`1
  href: AetherUtils.Core.Files.Json-1.html
  name: Json<PasswordRuleData>
  nameWithType: Json<PasswordRuleData>
  fullName: AetherUtils.Core.Files.Json<AetherUtils.Core.Security.Passwords.PasswordRuleData>
  nameWithType.vb: Json(Of PasswordRuleData)
  fullName.vb: AetherUtils.Core.Files.Json(Of AetherUtils.Core.Security.Passwords.PasswordRuleData)
  name.vb: Json(Of PasswordRuleData)
  spec.csharp:
  - uid: AetherUtils.Core.Files.Json`1
    name: Json
    href: AetherUtils.Core.Files.Json-1.html
  - name: <
  - uid: AetherUtils.Core.Security.Passwords.PasswordRuleData
    name: PasswordRuleData
    href: AetherUtils.Core.Security.Passwords.PasswordRuleData.html
  - name: '>'
  spec.vb:
  - uid: AetherUtils.Core.Files.Json`1
    name: Json
    href: AetherUtils.Core.Files.Json-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.Passwords.PasswordRuleData
    name: PasswordRuleData
    href: AetherUtils.Core.Security.Passwords.PasswordRuleData.html
  - name: )
- uid: AetherUtils.Core.Files.Json`1
  commentId: T:AetherUtils.Core.Files.Json`1
  href: AetherUtils.Core.Files.Json-1.html
  name: Json<T>
  nameWithType: Json<T>
  fullName: AetherUtils.Core.Files.Json<T>
  nameWithType.vb: Json(Of T)
  fullName.vb: AetherUtils.Core.Files.Json(Of T)
  name.vb: Json(Of T)
  spec.csharp:
  - uid: AetherUtils.Core.Files.Json`1
    name: Json
    href: AetherUtils.Core.Files.Json-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: AetherUtils.Core.Files.Json`1
    name: Json
    href: AetherUtils.Core.Files.Json-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: AetherUtils.Core.Files
  commentId: N:AetherUtils.Core.Files
  href: AetherUtils.html
  name: AetherUtils.Core.Files
  nameWithType: AetherUtils.Core.Files
  fullName: AetherUtils.Core.Files
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Files
    name: Files
    href: AetherUtils.Core.Files.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Files
    name: Files
    href: AetherUtils.Core.Files.html
- uid: AetherUtils.Core.Security.Encryption.StringEncryptionService
  commentId: T:AetherUtils.Core.Security.Encryption.StringEncryptionService
  parent: AetherUtils.Core.Security.Encryption
  href: AetherUtils.Core.Security.Encryption.StringEncryptionService.html
  name: StringEncryptionService
  nameWithType: StringEncryptionService
  fullName: AetherUtils.Core.Security.Encryption.StringEncryptionService
- uid: AetherUtils.Core.Security.Encryption
  commentId: N:AetherUtils.Core.Security.Encryption
  href: AetherUtils.html
  name: AetherUtils.Core.Security.Encryption
  nameWithType: AetherUtils.Core.Security.Encryption
  fullName: AetherUtils.Core.Security.Encryption
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Security
    name: Security
    href: AetherUtils.Core.Security.html
  - name: .
  - uid: AetherUtils.Core.Security.Encryption
    name: Encryption
    href: AetherUtils.Core.Security.Encryption.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Security
    name: Security
    href: AetherUtils.Core.Security.html
  - name: .
  - uid: AetherUtils.Core.Security.Encryption
    name: Encryption
    href: AetherUtils.Core.Security.Encryption.html
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.PasswordRules*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.PasswordRules
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_PasswordRules
  name: PasswordRules
  nameWithType: PasswordRule.PasswordRules
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.PasswordRules
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.#ctor*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.#ctor
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule__ctor_System_Boolean_
  name: PasswordRule
  nameWithType: PasswordRule.PasswordRule
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.PasswordRule
  nameWithType.vb: PasswordRule.New
  fullName.vb: AetherUtils.Core.Security.Passwords.PasswordRule.New
  name.vb: New
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.New*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.New
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_New
  name: New
  nameWithType: PasswordRule.New
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.New
- uid: AetherUtils.Core.Exceptions.PasswordRuleException
  commentId: T:AetherUtils.Core.Exceptions.PasswordRuleException
  href: AetherUtils.Core.Exceptions.PasswordRuleException.html
  name: PasswordRuleException
  nameWithType: PasswordRuleException
  fullName: AetherUtils.Core.Exceptions.PasswordRuleException
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AllowWhiteSpace*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.AllowWhiteSpace
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_AllowWhiteSpace
  name: AllowWhiteSpace
  nameWithType: PasswordRule.AllowWhiteSpace
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AllowWhiteSpace
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AllowSpecials*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.AllowSpecials
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_AllowSpecials
  name: AllowSpecials
  nameWithType: PasswordRule.AllowSpecials
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AllowSpecials
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AllowNumbers*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.AllowNumbers
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_AllowNumbers
  name: AllowNumbers
  nameWithType: PasswordRule.AllowNumbers
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AllowNumbers
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumLength*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.MinimumLength
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_MinimumLength_System_Int32_
  name: MinimumLength
  nameWithType: PasswordRule.MinimumLength
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumNumberCount*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.MinimumNumberCount
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_MinimumNumberCount_System_Int32_
  name: MinimumNumberCount
  nameWithType: PasswordRule.MinimumNumberCount
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumNumberCount
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumSpecialCount*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.MinimumSpecialCount
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_MinimumSpecialCount_System_Int32_
  name: MinimumSpecialCount
  nameWithType: PasswordRule.MinimumSpecialCount
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.MinimumSpecialCount
- uid: System.DateTime.MinValue
  commentId: F:System.DateTime.MinValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime.minvalue
  name: MinValue
  nameWithType: DateTime.MinValue
  fullName: System.DateTime.MinValue
  nameWithType.vb: Date.MinValue
  fullName.vb: Date.MinValue
- uid: System.DateTime.MaxValue
  commentId: F:System.DateTime.MaxValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime.maxvalue
  name: MaxValue
  nameWithType: DateTime.MaxValue
  fullName: System.DateTime.MaxValue
  nameWithType.vb: Date.MaxValue
  fullName.vb: Date.MaxValue
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.Expires*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.Expires
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_Expires_System_DateTime_
  name: Expires
  nameWithType: PasswordRule.Expires
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.Expires
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.FinishedBuilding*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.FinishedBuilding
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_FinishedBuilding
  name: FinishedBuilding
  nameWithType: PasswordRule.FinishedBuilding
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.FinishedBuilding
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.CompileRules*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.CompileRules
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_CompileRules
  name: CompileRules
  nameWithType: PasswordRule.CompileRules
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.CompileRules
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.ToJsonString*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.ToJsonString
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_ToJsonString
  name: ToJsonString
  nameWithType: PasswordRule.ToJsonString
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.ToJsonString
- uid: AetherUtils.Core.Security.Passwords.PasswordRule
  commentId: T:AetherUtils.Core.Security.Passwords.PasswordRule
  parent: AetherUtils.Core.Security.Passwords
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  name: PasswordRule
  nameWithType: PasswordRule
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.Parse*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.Parse
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_Parse_System_String_
  name: Parse
  nameWithType: PasswordRule.Parse
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.Parse
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.ToEncryptedString*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.ToEncryptedString
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_ToEncryptedString_System_String_
  name: ToEncryptedString
  nameWithType: PasswordRule.ToEncryptedString
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.ToEncryptedString
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.FromEncryptedString*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.FromEncryptedString
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_FromEncryptedString_System_String_System_String_
  name: FromEncryptedString
  nameWithType: PasswordRule.FromEncryptedString
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.FromEncryptedString
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.SaveToFileAsync*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.SaveToFileAsync
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_SaveToFileAsync_System_String_System_String_
  name: SaveToFileAsync
  nameWithType: PasswordRule.SaveToFileAsync
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.SaveToFileAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.ParseFromFileAsync*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.ParseFromFileAsync
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_ParseFromFileAsync_System_String_System_String_
  name: ParseFromFileAsync
  nameWithType: PasswordRule.ParseFromFileAsync
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.ParseFromFileAsync
- uid: System.Threading.Tasks.Task{AetherUtils.Core.Security.Passwords.PasswordRule}
  commentId: T:System.Threading.Tasks.Task{AetherUtils.Core.Security.Passwords.PasswordRule}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<PasswordRule>
  nameWithType: Task<PasswordRule>
  fullName: System.Threading.Tasks.Task<AetherUtils.Core.Security.Passwords.PasswordRule>
  nameWithType.vb: Task(Of PasswordRule)
  fullName.vb: System.Threading.Tasks.Task(Of AetherUtils.Core.Security.Passwords.PasswordRule)
  name.vb: Task(Of PasswordRule)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.Passwords.PasswordRule
    name: PasswordRule
    href: AetherUtils.Core.Security.Passwords.PasswordRule.html
  - name: )
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.GetValidPassword*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.GetValidPassword
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_GetValidPassword
  name: GetValidPassword
  nameWithType: PasswordRule.GetValidPassword
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.GetValidPassword
- uid: AetherUtils.Core.Utility.ProportionalRandomSelector`1
  commentId: T:AetherUtils.Core.Utility.ProportionalRandomSelector`1
  href: AetherUtils.Core.Utility.ProportionalRandomSelector-1.html
  name: ProportionalRandomSelector<T>
  nameWithType: ProportionalRandomSelector<T>
  fullName: AetherUtils.Core.Utility.ProportionalRandomSelector<T>
  nameWithType.vb: ProportionalRandomSelector(Of T)
  fullName.vb: AetherUtils.Core.Utility.ProportionalRandomSelector(Of T)
  name.vb: ProportionalRandomSelector(Of T)
  spec.csharp:
  - uid: AetherUtils.Core.Utility.ProportionalRandomSelector`1
    name: ProportionalRandomSelector
    href: AetherUtils.Core.Utility.ProportionalRandomSelector-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: AetherUtils.Core.Utility.ProportionalRandomSelector`1
    name: ProportionalRandomSelector
    href: AetherUtils.Core.Utility.ProportionalRandomSelector-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.GetSelector*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.GetSelector
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_GetSelector_System_Int32_System_Int32_System_Int32_System_Int32_
  name: GetSelector
  nameWithType: PasswordRule.GetSelector
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.GetSelector
- uid: AetherUtils.Core.Utility.ProportionalRandomSelector{AetherUtils.Core.Enums.CharacterType}
  commentId: T:AetherUtils.Core.Utility.ProportionalRandomSelector{AetherUtils.Core.Enums.CharacterType}
  parent: AetherUtils.Core.Utility
  definition: AetherUtils.Core.Utility.ProportionalRandomSelector`1
  href: AetherUtils.Core.Utility.ProportionalRandomSelector-1.html
  name: ProportionalRandomSelector<CharacterType>
  nameWithType: ProportionalRandomSelector<CharacterType>
  fullName: AetherUtils.Core.Utility.ProportionalRandomSelector<AetherUtils.Core.Enums.CharacterType>
  nameWithType.vb: ProportionalRandomSelector(Of CharacterType)
  fullName.vb: AetherUtils.Core.Utility.ProportionalRandomSelector(Of AetherUtils.Core.Enums.CharacterType)
  name.vb: ProportionalRandomSelector(Of CharacterType)
  spec.csharp:
  - uid: AetherUtils.Core.Utility.ProportionalRandomSelector`1
    name: ProportionalRandomSelector
    href: AetherUtils.Core.Utility.ProportionalRandomSelector-1.html
  - name: <
  - uid: AetherUtils.Core.Enums.CharacterType
    name: CharacterType
    href: AetherUtils.Core.Enums.CharacterType.html
  - name: '>'
  spec.vb:
  - uid: AetherUtils.Core.Utility.ProportionalRandomSelector`1
    name: ProportionalRandomSelector
    href: AetherUtils.Core.Utility.ProportionalRandomSelector-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Enums.CharacterType
    name: CharacterType
    href: AetherUtils.Core.Enums.CharacterType.html
  - name: )
- uid: AetherUtils.Core.Utility
  commentId: N:AetherUtils.Core.Utility
  href: AetherUtils.html
  name: AetherUtils.Core.Utility
  nameWithType: AetherUtils.Core.Utility
  fullName: AetherUtils.Core.Utility
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Utility
    name: Utility
    href: AetherUtils.Core.Utility.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Utility
    name: Utility
    href: AetherUtils.Core.Utility.html
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AddWhiteSpace*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.AddWhiteSpace
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_AddWhiteSpace_System_Text_StringBuilder__System_Int32__
  name: AddWhiteSpace
  nameWithType: PasswordRule.AddWhiteSpace
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AddWhiteSpace
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.stringbuilder
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AddSpecial*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.AddSpecial
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_AddSpecial_System_Text_StringBuilder__System_Int32__System_Int32__
  name: AddSpecial
  nameWithType: PasswordRule.AddSpecial
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AddSpecial
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AddNumber*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.AddNumber
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_AddNumber_System_Text_StringBuilder__System_Int32__System_Int32__
  name: AddNumber
  nameWithType: PasswordRule.AddNumber
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AddNumber
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.AddCharacter*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.AddCharacter
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_AddCharacter_System_Text_StringBuilder__System_Int32__System_Int32__System_Int32__
  name: AddCharacter
  nameWithType: PasswordRule.AddCharacter
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.AddCharacter
- uid: AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure
  commentId: T:AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure
  parent: AetherUtils.Core.Security.Passwords.Validation
  href: AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure.html
  name: IPasswordValidationFailure
  nameWithType: IPasswordValidationFailure
  fullName: AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.Validate*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.Validate
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_Validate_System_String_
  name: Validate
  nameWithType: PasswordRule.Validate
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.Validate
- uid: System.Collections.Generic.List{AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure}
  commentId: T:System.Collections.Generic.List{AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<IPasswordValidationFailure>
  nameWithType: List<IPasswordValidationFailure>
  fullName: System.Collections.Generic.List<AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure>
  nameWithType.vb: List(Of IPasswordValidationFailure)
  fullName.vb: System.Collections.Generic.List(Of AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure)
  name.vb: List(Of IPasswordValidationFailure)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure
    name: IPasswordValidationFailure
    href: AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure
    name: IPasswordValidationFailure
    href: AetherUtils.Core.Security.Passwords.Validation.IPasswordValidationFailure.html
  - name: )
- uid: AetherUtils.Core.Security.Passwords.Validation
  commentId: N:AetherUtils.Core.Security.Passwords.Validation
  href: AetherUtils.html
  name: AetherUtils.Core.Security.Passwords.Validation
  nameWithType: AetherUtils.Core.Security.Passwords.Validation
  fullName: AetherUtils.Core.Security.Passwords.Validation
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Security
    name: Security
    href: AetherUtils.Core.Security.html
  - name: .
  - uid: AetherUtils.Core.Security.Passwords
    name: Passwords
    href: AetherUtils.Core.Security.Passwords.html
  - name: .
  - uid: AetherUtils.Core.Security.Passwords.Validation
    name: Validation
    href: AetherUtils.Core.Security.Passwords.Validation.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Security
    name: Security
    href: AetherUtils.Core.Security.html
  - name: .
  - uid: AetherUtils.Core.Security.Passwords
    name: Passwords
    href: AetherUtils.Core.Security.Passwords.html
  - name: .
  - uid: AetherUtils.Core.Security.Passwords.Validation
    name: Validation
    href: AetherUtils.Core.Security.Passwords.Validation.html
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: AetherUtils.Core.Security.Passwords.PasswordRule.ToString*
  commentId: Overload:AetherUtils.Core.Security.Passwords.PasswordRule.ToString
  href: AetherUtils.Core.Security.Passwords.PasswordRule.html#AetherUtils_Core_Security_Passwords_PasswordRule_ToString
  name: ToString
  nameWithType: PasswordRule.ToString
  fullName: AetherUtils.Core.Security.Passwords.PasswordRule.ToString
shouldSkipMarkup: true
