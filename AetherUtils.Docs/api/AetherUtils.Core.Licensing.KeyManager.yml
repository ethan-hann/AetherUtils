### YamlMime:ManagedReference
items:
- uid: AetherUtils.Core.Licensing.KeyManager
  commentId: T:AetherUtils.Core.Licensing.KeyManager
  id: KeyManager
  parent: AetherUtils.Core.Licensing
  children:
  - AetherUtils.Core.Licensing.KeyManager.DoesKeyFileExist(System.String,System.String)
  - AetherUtils.Core.Licensing.KeyManager.LoadKeys(System.String)
  - AetherUtils.Core.Licensing.KeyManager.LoadKeys(System.String,System.String)
  - AetherUtils.Core.Licensing.KeyManager.SaveKeys(AetherUtils.Core.Licensing.KeyPair,System.String,System.String)
  - AetherUtils.Core.Licensing.KeyManager.SavePublicKey(AetherUtils.Core.Licensing.KeyPair,System.String,System.String)
  - AetherUtils.Core.Licensing.KeyManager.SavePublicKey(System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: KeyManager
  nameWithType: KeyManager
  fullName: AetherUtils.Core.Licensing.KeyManager
  type: Class
  source:
    remote:
      path: AetherUtils.Core/Licensing/KeyManager.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: KeyManager
    path: ../AetherUtils.Core/Licensing/KeyManager.cs
    startLine: 9
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Licensing
  summary: Handles loading and saving private and public keys to file system.
  example: []
  syntax:
    content: public static class KeyManager
    content.vb: Public Module KeyManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: AetherUtils.Core.Licensing.KeyManager.SaveKeys(AetherUtils.Core.Licensing.KeyPair,System.String,System.String)
  commentId: M:AetherUtils.Core.Licensing.KeyManager.SaveKeys(AetherUtils.Core.Licensing.KeyPair,System.String,System.String)
  id: SaveKeys(AetherUtils.Core.Licensing.KeyPair,System.String,System.String)
  parent: AetherUtils.Core.Licensing.KeyManager
  langs:
  - csharp
  - vb
  name: SaveKeys(KeyPair, string, string)
  nameWithType: KeyManager.SaveKeys(KeyPair, string, string)
  fullName: AetherUtils.Core.Licensing.KeyManager.SaveKeys(AetherUtils.Core.Licensing.KeyPair, string, string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Licensing/KeyManager.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SaveKeys
    path: ../AetherUtils.Core/Licensing/KeyManager.cs
    startLine: 17
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Licensing
  summary: Save the key pair to a file.
  example: []
  syntax:
    content: public static void SaveKeys(KeyPair keys, string basePath, string fileName = "keyPair.keys")
    parameters:
    - id: keys
      type: AetherUtils.Core.Licensing.KeyPair
      description: The pair of keys (private and public). Private key should be first.
    - id: basePath
      type: System.String
      description: The base folder to save the keys in.
    - id: fileName
      type: System.String
      description: 'The name of the file to save: default is <code>keyPair.keys</code>'
    content.vb: Public Shared Sub SaveKeys(keys As KeyPair, basePath As String, fileName As String = "keyPair.keys")
  overload: AetherUtils.Core.Licensing.KeyManager.SaveKeys*
  nameWithType.vb: KeyManager.SaveKeys(KeyPair, String, String)
  fullName.vb: AetherUtils.Core.Licensing.KeyManager.SaveKeys(AetherUtils.Core.Licensing.KeyPair, String, String)
  name.vb: SaveKeys(KeyPair, String, String)
- uid: AetherUtils.Core.Licensing.KeyManager.SavePublicKey(AetherUtils.Core.Licensing.KeyPair,System.String,System.String)
  commentId: M:AetherUtils.Core.Licensing.KeyManager.SavePublicKey(AetherUtils.Core.Licensing.KeyPair,System.String,System.String)
  id: SavePublicKey(AetherUtils.Core.Licensing.KeyPair,System.String,System.String)
  parent: AetherUtils.Core.Licensing.KeyManager
  langs:
  - csharp
  - vb
  name: SavePublicKey(KeyPair, string, string)
  nameWithType: KeyManager.SavePublicKey(KeyPair, string, string)
  fullName: AetherUtils.Core.Licensing.KeyManager.SavePublicKey(AetherUtils.Core.Licensing.KeyPair, string, string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Licensing/KeyManager.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SavePublicKey
    path: ../AetherUtils.Core/Licensing/KeyManager.cs
    startLine: 37
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Licensing
  summary: Save only the public key to a file.
  example: []
  syntax:
    content: public static void SavePublicKey(KeyPair keys, string basePath, string fileName = "public.key")
    parameters:
    - id: keys
      type: AetherUtils.Core.Licensing.KeyPair
      description: The pair of keys (private and public). Private key should be first.
    - id: basePath
      type: System.String
      description: The base folder to save the public key in.
    - id: fileName
      type: System.String
      description: 'The name of the file to save: default is <code>public.key</code>'
    content.vb: Public Shared Sub SavePublicKey(keys As KeyPair, basePath As String, fileName As String = "public.key")
  overload: AetherUtils.Core.Licensing.KeyManager.SavePublicKey*
  nameWithType.vb: KeyManager.SavePublicKey(KeyPair, String, String)
  fullName.vb: AetherUtils.Core.Licensing.KeyManager.SavePublicKey(AetherUtils.Core.Licensing.KeyPair, String, String)
  name.vb: SavePublicKey(KeyPair, String, String)
- uid: AetherUtils.Core.Licensing.KeyManager.SavePublicKey(System.String,System.String,System.String)
  commentId: M:AetherUtils.Core.Licensing.KeyManager.SavePublicKey(System.String,System.String,System.String)
  id: SavePublicKey(System.String,System.String,System.String)
  parent: AetherUtils.Core.Licensing.KeyManager
  langs:
  - csharp
  - vb
  name: SavePublicKey(string, string, string)
  nameWithType: KeyManager.SavePublicKey(string, string, string)
  fullName: AetherUtils.Core.Licensing.KeyManager.SavePublicKey(string, string, string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Licensing/KeyManager.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SavePublicKey
    path: ../AetherUtils.Core/Licensing/KeyManager.cs
    startLine: 58
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Licensing
  summary: Save only the public key to a file.
  example: []
  syntax:
    content: public static void SavePublicKey(string publicKey, string basePath, string fileName = "public.key")
    parameters:
    - id: publicKey
      type: System.String
      description: The public key to save.
    - id: basePath
      type: System.String
      description: The base folder to save the public key in.
    - id: fileName
      type: System.String
      description: 'The name of the file to save: default is <code>public.key</code>'
    content.vb: Public Shared Sub SavePublicKey(publicKey As String, basePath As String, fileName As String = "public.key")
  overload: AetherUtils.Core.Licensing.KeyManager.SavePublicKey*
  nameWithType.vb: KeyManager.SavePublicKey(String, String, String)
  fullName.vb: AetherUtils.Core.Licensing.KeyManager.SavePublicKey(String, String, String)
  name.vb: SavePublicKey(String, String, String)
- uid: AetherUtils.Core.Licensing.KeyManager.LoadKeys(System.String,System.String)
  commentId: M:AetherUtils.Core.Licensing.KeyManager.LoadKeys(System.String,System.String)
  id: LoadKeys(System.String,System.String)
  parent: AetherUtils.Core.Licensing.KeyManager
  langs:
  - csharp
  - vb
  name: LoadKeys(string, string)
  nameWithType: KeyManager.LoadKeys(string, string)
  fullName: AetherUtils.Core.Licensing.KeyManager.LoadKeys(string, string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Licensing/KeyManager.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: LoadKeys
    path: ../AetherUtils.Core/Licensing/KeyManager.cs
    startLine: 78
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Licensing
  summary: Load a key pair from a file.
  example: []
  syntax:
    content: public static KeyPair? LoadKeys(string basePath, string fileName)
    parameters:
    - id: basePath
      type: System.String
      description: The base folder the keys are located in.
    - id: fileName
      type: System.String
      description: The name of the file to load.
    return:
      type: System.Nullable{AetherUtils.Core.Licensing.KeyPair}
      description: A <xref href="AetherUtils.Core.Licensing.KeyPair" data-throw-if-not-resolved="false"></xref> representing the key values.
    content.vb: Public Shared Function LoadKeys(basePath As String, fileName As String) As KeyPair?
  overload: AetherUtils.Core.Licensing.KeyManager.LoadKeys*
  nameWithType.vb: KeyManager.LoadKeys(String, String)
  fullName.vb: AetherUtils.Core.Licensing.KeyManager.LoadKeys(String, String)
  name.vb: LoadKeys(String, String)
- uid: AetherUtils.Core.Licensing.KeyManager.LoadKeys(System.String)
  commentId: M:AetherUtils.Core.Licensing.KeyManager.LoadKeys(System.String)
  id: LoadKeys(System.String)
  parent: AetherUtils.Core.Licensing.KeyManager
  langs:
  - csharp
  - vb
  name: LoadKeys(string)
  nameWithType: KeyManager.LoadKeys(string)
  fullName: AetherUtils.Core.Licensing.KeyManager.LoadKeys(string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Licensing/KeyManager.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: LoadKeys
    path: ../AetherUtils.Core/Licensing/KeyManager.cs
    startLine: 89
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Licensing
  summary: Load a key pair from a file.
  example: []
  syntax:
    content: public static KeyPair? LoadKeys(string fullPath)
    parameters:
    - id: fullPath
      type: System.String
      description: The full, absolute path to a key file.
    return:
      type: System.Nullable{AetherUtils.Core.Licensing.KeyPair}
      description: A <xref href="AetherUtils.Core.Licensing.KeyPair" data-throw-if-not-resolved="false"></xref> representing the key values.
    content.vb: Public Shared Function LoadKeys(fullPath As String) As KeyPair?
  overload: AetherUtils.Core.Licensing.KeyManager.LoadKeys*
  nameWithType.vb: KeyManager.LoadKeys(String)
  fullName.vb: AetherUtils.Core.Licensing.KeyManager.LoadKeys(String)
  name.vb: LoadKeys(String)
- uid: AetherUtils.Core.Licensing.KeyManager.DoesKeyFileExist(System.String,System.String)
  commentId: M:AetherUtils.Core.Licensing.KeyManager.DoesKeyFileExist(System.String,System.String)
  id: DoesKeyFileExist(System.String,System.String)
  parent: AetherUtils.Core.Licensing.KeyManager
  langs:
  - csharp
  - vb
  name: DoesKeyFileExist(string, string)
  nameWithType: KeyManager.DoesKeyFileExist(string, string)
  fullName: AetherUtils.Core.Licensing.KeyManager.DoesKeyFileExist(string, string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Licensing/KeyManager.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: DoesKeyFileExist
    path: ../AetherUtils.Core/Licensing/KeyManager.cs
    startLine: 107
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Licensing
  summary: Get a value indicating whether the keyPair.keys file exists at the specified base path.
  example: []
  syntax:
    content: public static bool DoesKeyFileExist(string basePath, string fileName = "keyPair.keys")
    parameters:
    - id: basePath
      type: System.String
      description: The base folder the keys are located in.
    - id: fileName
      type: System.String
      description: 'The name of the file to check: default is <code>keyPair.keys</code>'
    return:
      type: System.Boolean
      description: <code>true</code> if the file was found; <code>false</code>, otherwise.
    content.vb: Public Shared Function DoesKeyFileExist(basePath As String, fileName As String = "keyPair.keys") As Boolean
  overload: AetherUtils.Core.Licensing.KeyManager.DoesKeyFileExist*
  nameWithType.vb: KeyManager.DoesKeyFileExist(String, String)
  fullName.vb: AetherUtils.Core.Licensing.KeyManager.DoesKeyFileExist(String, String)
  name.vb: DoesKeyFileExist(String, String)
references:
- uid: AetherUtils.Core.Licensing
  commentId: N:AetherUtils.Core.Licensing
  href: AetherUtils.html
  name: AetherUtils.Core.Licensing
  nameWithType: AetherUtils.Core.Licensing
  fullName: AetherUtils.Core.Licensing
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Licensing
    name: Licensing
    href: AetherUtils.Core.Licensing.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Licensing
    name: Licensing
    href: AetherUtils.Core.Licensing.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AetherUtils.Core.Licensing.KeyManager.SaveKeys*
  commentId: Overload:AetherUtils.Core.Licensing.KeyManager.SaveKeys
  href: AetherUtils.Core.Licensing.KeyManager.html#AetherUtils_Core_Licensing_KeyManager_SaveKeys_AetherUtils_Core_Licensing_KeyPair_System_String_System_String_
  name: SaveKeys
  nameWithType: KeyManager.SaveKeys
  fullName: AetherUtils.Core.Licensing.KeyManager.SaveKeys
- uid: AetherUtils.Core.Licensing.KeyPair
  commentId: T:AetherUtils.Core.Licensing.KeyPair
  parent: AetherUtils.Core.Licensing
  href: AetherUtils.Core.Licensing.KeyPair.html
  name: KeyPair
  nameWithType: KeyPair
  fullName: AetherUtils.Core.Licensing.KeyPair
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: AetherUtils.Core.Licensing.KeyManager.SavePublicKey*
  commentId: Overload:AetherUtils.Core.Licensing.KeyManager.SavePublicKey
  href: AetherUtils.Core.Licensing.KeyManager.html#AetherUtils_Core_Licensing_KeyManager_SavePublicKey_AetherUtils_Core_Licensing_KeyPair_System_String_System_String_
  name: SavePublicKey
  nameWithType: KeyManager.SavePublicKey
  fullName: AetherUtils.Core.Licensing.KeyManager.SavePublicKey
- uid: AetherUtils.Core.Licensing.KeyManager.LoadKeys*
  commentId: Overload:AetherUtils.Core.Licensing.KeyManager.LoadKeys
  href: AetherUtils.Core.Licensing.KeyManager.html#AetherUtils_Core_Licensing_KeyManager_LoadKeys_System_String_System_String_
  name: LoadKeys
  nameWithType: KeyManager.LoadKeys
  fullName: AetherUtils.Core.Licensing.KeyManager.LoadKeys
- uid: System.Nullable{AetherUtils.Core.Licensing.KeyPair}
  commentId: T:System.Nullable{AetherUtils.Core.Licensing.KeyPair}
  parent: System
  definition: System.Nullable`1
  href: AetherUtils.Core.Licensing.KeyPair.html
  name: KeyPair?
  nameWithType: KeyPair?
  fullName: AetherUtils.Core.Licensing.KeyPair?
  spec.csharp:
  - uid: AetherUtils.Core.Licensing.KeyPair
    name: KeyPair
    href: AetherUtils.Core.Licensing.KeyPair.html
  - name: '?'
  spec.vb:
  - uid: AetherUtils.Core.Licensing.KeyPair
    name: KeyPair
    href: AetherUtils.Core.Licensing.KeyPair.html
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: AetherUtils.Core.Licensing.KeyManager.DoesKeyFileExist*
  commentId: Overload:AetherUtils.Core.Licensing.KeyManager.DoesKeyFileExist
  href: AetherUtils.Core.Licensing.KeyManager.html#AetherUtils_Core_Licensing_KeyManager_DoesKeyFileExist_System_String_System_String_
  name: DoesKeyFileExist
  nameWithType: KeyManager.DoesKeyFileExist
  fullName: AetherUtils.Core.Licensing.KeyManager.DoesKeyFileExist
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
shouldSkipMarkup: true
