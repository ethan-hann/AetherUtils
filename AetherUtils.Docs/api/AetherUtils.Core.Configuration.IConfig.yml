### YamlMime:ManagedReference
items:
- uid: AetherUtils.Core.Configuration.IConfig
  commentId: T:AetherUtils.Core.Configuration.IConfig
  id: IConfig
  parent: AetherUtils.Core.Configuration
  children:
  - AetherUtils.Core.Configuration.IConfig.ConfigExists
  - AetherUtils.Core.Configuration.IConfig.ConfigFilePath
  - AetherUtils.Core.Configuration.IConfig.Get(AetherUtils.Core.Structs.ConfigOption)
  - AetherUtils.Core.Configuration.IConfig.IsInitialized
  - AetherUtils.Core.Configuration.IConfig.Load
  - AetherUtils.Core.Configuration.IConfig.LoadAsync
  - AetherUtils.Core.Configuration.IConfig.Save
  - AetherUtils.Core.Configuration.IConfig.SaveAsync
  - AetherUtils.Core.Configuration.IConfig.Set(AetherUtils.Core.Structs.ConfigOption)
  langs:
  - csharp
  - vb
  name: IConfig
  nameWithType: IConfig
  fullName: AetherUtils.Core.Configuration.IConfig
  type: Interface
  source:
    remote:
      path: AetherUtils.Core/Configuration/IConfig.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: IConfig
    path: ../AetherUtils.Core/Configuration/IConfig.cs
    startLine: 7
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Configuration
  summary: Interface that all <xref href="AetherUtils.Core.Configuration.ConfigManager%601" data-throw-if-not-resolved="false"></xref> classes must implement.
  example: []
  syntax:
    content: public interface IConfig
    content.vb: Public Interface IConfig
  extensionMethods:
  - AetherUtils.Core.Configuration.IConfig.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1
  - AetherUtils.Core.Configuration.IConfig.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1
  - AetherUtils.Core.Configuration.IConfig.AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1
  - AetherUtils.Core.Configuration.IConfig.AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1
- uid: AetherUtils.Core.Configuration.IConfig.ConfigFilePath
  commentId: P:AetherUtils.Core.Configuration.IConfig.ConfigFilePath
  id: ConfigFilePath
  parent: AetherUtils.Core.Configuration.IConfig
  langs:
  - csharp
  - vb
  name: ConfigFilePath
  nameWithType: IConfig.ConfigFilePath
  fullName: AetherUtils.Core.Configuration.IConfig.ConfigFilePath
  type: Property
  source:
    remote:
      path: AetherUtils.Core/Configuration/IConfig.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ConfigFilePath
    path: ../AetherUtils.Core/Configuration/IConfig.cs
    startLine: 13
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Configuration
  summary: >-
    The file path to a configuration file. This path can contain Windows path variables (i.e., <code>%TEMP%</code>). They will be

    expanded when saving and loading.
  example: []
  syntax:
    content: string? ConfigFilePath { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property ConfigFilePath As String
  overload: AetherUtils.Core.Configuration.IConfig.ConfigFilePath*
- uid: AetherUtils.Core.Configuration.IConfig.IsInitialized
  commentId: P:AetherUtils.Core.Configuration.IConfig.IsInitialized
  id: IsInitialized
  parent: AetherUtils.Core.Configuration.IConfig
  langs:
  - csharp
  - vb
  name: IsInitialized
  nameWithType: IConfig.IsInitialized
  fullName: AetherUtils.Core.Configuration.IConfig.IsInitialized
  type: Property
  source:
    remote:
      path: AetherUtils.Core/Configuration/IConfig.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: IsInitialized
    path: ../AetherUtils.Core/Configuration/IConfig.cs
    startLine: 18
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Configuration
  summary: Get a value indicating whether this configuration is initialized and ready to be used.
  example: []
  syntax:
    content: bool IsInitialized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsInitialized As Boolean
  overload: AetherUtils.Core.Configuration.IConfig.IsInitialized*
- uid: AetherUtils.Core.Configuration.IConfig.ConfigExists
  commentId: P:AetherUtils.Core.Configuration.IConfig.ConfigExists
  id: ConfigExists
  parent: AetherUtils.Core.Configuration.IConfig
  langs:
  - csharp
  - vb
  name: ConfigExists
  nameWithType: IConfig.ConfigExists
  fullName: AetherUtils.Core.Configuration.IConfig.ConfigExists
  type: Property
  source:
    remote:
      path: AetherUtils.Core/Configuration/IConfig.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ConfigExists
    path: ../AetherUtils.Core/Configuration/IConfig.cs
    startLine: 23
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Configuration
  summary: Get a value indicating whether the configuration file specified by <xref href="AetherUtils.Core.Configuration.IConfig.ConfigFilePath" data-throw-if-not-resolved="false"></xref> exists.
  example: []
  syntax:
    content: bool ConfigExists { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property ConfigExists As Boolean
  overload: AetherUtils.Core.Configuration.IConfig.ConfigExists*
- uid: AetherUtils.Core.Configuration.IConfig.LoadAsync
  commentId: M:AetherUtils.Core.Configuration.IConfig.LoadAsync
  id: LoadAsync
  parent: AetherUtils.Core.Configuration.IConfig
  langs:
  - csharp
  - vb
  name: LoadAsync()
  nameWithType: IConfig.LoadAsync()
  fullName: AetherUtils.Core.Configuration.IConfig.LoadAsync()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Configuration/IConfig.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: LoadAsync
    path: ../AetherUtils.Core/Configuration/IConfig.cs
    startLine: 29
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Configuration
  summary: Asynchronously deserialize a configuration file from disk, if it exists.
  example: []
  syntax:
    content: Task<bool> LoadAsync()
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: <code>true</code> if the file loaded successfully; <code>false</code>, otherwise.
    content.vb: Function LoadAsync() As Task(Of Boolean)
  overload: AetherUtils.Core.Configuration.IConfig.LoadAsync*
- uid: AetherUtils.Core.Configuration.IConfig.Load
  commentId: M:AetherUtils.Core.Configuration.IConfig.Load
  id: Load
  parent: AetherUtils.Core.Configuration.IConfig
  langs:
  - csharp
  - vb
  name: Load()
  nameWithType: IConfig.Load()
  fullName: AetherUtils.Core.Configuration.IConfig.Load()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Configuration/IConfig.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: Load
    path: ../AetherUtils.Core/Configuration/IConfig.cs
    startLine: 35
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Configuration
  summary: Deserialize a configuration file from disk, if it exists.
  example: []
  syntax:
    content: bool Load()
    return:
      type: System.Boolean
      description: <code>true</code> if the file loaded successfully; <code>false</code>, otherwise.
    content.vb: Function Load() As Boolean
  overload: AetherUtils.Core.Configuration.IConfig.Load*
- uid: AetherUtils.Core.Configuration.IConfig.SaveAsync
  commentId: M:AetherUtils.Core.Configuration.IConfig.SaveAsync
  id: SaveAsync
  parent: AetherUtils.Core.Configuration.IConfig
  langs:
  - csharp
  - vb
  name: SaveAsync()
  nameWithType: IConfig.SaveAsync()
  fullName: AetherUtils.Core.Configuration.IConfig.SaveAsync()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Configuration/IConfig.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SaveAsync
    path: ../AetherUtils.Core/Configuration/IConfig.cs
    startLine: 41
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Configuration
  summary: Asynchronously serialize and save a configuration file to disk based on the current configuration.
  example: []
  syntax:
    content: Task<bool> SaveAsync()
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: <code>true</code> if the file saved successfully; <code>false</code>, otherwise.
    content.vb: Function SaveAsync() As Task(Of Boolean)
  overload: AetherUtils.Core.Configuration.IConfig.SaveAsync*
- uid: AetherUtils.Core.Configuration.IConfig.Save
  commentId: M:AetherUtils.Core.Configuration.IConfig.Save
  id: Save
  parent: AetherUtils.Core.Configuration.IConfig
  langs:
  - csharp
  - vb
  name: Save()
  nameWithType: IConfig.Save()
  fullName: AetherUtils.Core.Configuration.IConfig.Save()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Configuration/IConfig.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: Save
    path: ../AetherUtils.Core/Configuration/IConfig.cs
    startLine: 47
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Configuration
  summary: Serialize and save a configuration file to disk based on the current configuration.
  example: []
  syntax:
    content: bool Save()
    return:
      type: System.Boolean
      description: <code>true</code> if the file saved successfully; <code>false</code>, otherwise.
    content.vb: Function Save() As Boolean
  overload: AetherUtils.Core.Configuration.IConfig.Save*
- uid: AetherUtils.Core.Configuration.IConfig.Get(AetherUtils.Core.Structs.ConfigOption)
  commentId: M:AetherUtils.Core.Configuration.IConfig.Get(AetherUtils.Core.Structs.ConfigOption)
  id: Get(AetherUtils.Core.Structs.ConfigOption)
  parent: AetherUtils.Core.Configuration.IConfig
  langs:
  - csharp
  - vb
  name: Get(ConfigOption)
  nameWithType: IConfig.Get(ConfigOption)
  fullName: AetherUtils.Core.Configuration.IConfig.Get(AetherUtils.Core.Structs.ConfigOption)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Configuration/IConfig.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: Get
    path: ../AetherUtils.Core/Configuration/IConfig.cs
    startLine: 54
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Configuration
  summary: Get the configuration value for the named config property.
  example: []
  syntax:
    content: object? Get(ConfigOption option)
    parameters:
    - id: option
      type: AetherUtils.Core.Structs.ConfigOption
      description: The <xref href="AetherUtils.Core.Structs.ConfigOption" data-throw-if-not-resolved="false"></xref> defining the configuration parameters to get.
    return:
      type: System.Object
      description: The value of the configuration property.
    content.vb: Function [Get]([option] As ConfigOption) As Object
  overload: AetherUtils.Core.Configuration.IConfig.Get*
- uid: AetherUtils.Core.Configuration.IConfig.Set(AetherUtils.Core.Structs.ConfigOption)
  commentId: M:AetherUtils.Core.Configuration.IConfig.Set(AetherUtils.Core.Structs.ConfigOption)
  id: Set(AetherUtils.Core.Structs.ConfigOption)
  parent: AetherUtils.Core.Configuration.IConfig
  langs:
  - csharp
  - vb
  name: Set(ConfigOption)
  nameWithType: IConfig.Set(ConfigOption)
  fullName: AetherUtils.Core.Configuration.IConfig.Set(AetherUtils.Core.Structs.ConfigOption)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Configuration/IConfig.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: Set
    path: ../AetherUtils.Core/Configuration/IConfig.cs
    startLine: 61
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Configuration
  summary: Set a configuration value for the named config property.
  example: []
  syntax:
    content: bool Set(ConfigOption option)
    parameters:
    - id: option
      type: AetherUtils.Core.Structs.ConfigOption
      description: The <xref href="AetherUtils.Core.Structs.ConfigOption" data-throw-if-not-resolved="false"></xref> defining the configuration parameters to set.
    return:
      type: System.Boolean
      description: <code>true</code> if the value was set successfully; <code>false</code> otherwise.
    content.vb: Function [Set]([option] As ConfigOption) As Boolean
  overload: AetherUtils.Core.Configuration.IConfig.Set*
references:
- uid: AetherUtils.Core.Configuration.ConfigManager`1
  commentId: T:AetherUtils.Core.Configuration.ConfigManager`1
  href: AetherUtils.Core.Configuration.ConfigManager-1.html
  name: ConfigManager<T>
  nameWithType: ConfigManager<T>
  fullName: AetherUtils.Core.Configuration.ConfigManager<T>
  nameWithType.vb: ConfigManager(Of T)
  fullName.vb: AetherUtils.Core.Configuration.ConfigManager(Of T)
  name.vb: ConfigManager(Of T)
  spec.csharp:
  - uid: AetherUtils.Core.Configuration.ConfigManager`1
    name: ConfigManager
    href: AetherUtils.Core.Configuration.ConfigManager-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: AetherUtils.Core.Configuration.ConfigManager`1
    name: ConfigManager
    href: AetherUtils.Core.Configuration.ConfigManager-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: AetherUtils.Core.Configuration
  commentId: N:AetherUtils.Core.Configuration
  href: AetherUtils.html
  name: AetherUtils.Core.Configuration
  nameWithType: AetherUtils.Core.Configuration
  fullName: AetherUtils.Core.Configuration
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Configuration
    name: Configuration
    href: AetherUtils.Core.Configuration.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Configuration
    name: Configuration
    href: AetherUtils.Core.Configuration.html
- uid: AetherUtils.Core.Configuration.IConfig.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  name: CanSerializeJson<IConfig>(IConfig)
  nameWithType: TypeExtensions.CanSerializeJson<IConfig>(IConfig)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson<AetherUtils.Core.Configuration.IConfig>(AetherUtils.Core.Configuration.IConfig)
  nameWithType.vb: TypeExtensions.CanSerializeJson(Of IConfig)(IConfig)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson(Of AetherUtils.Core.Configuration.IConfig)(AetherUtils.Core.Configuration.IConfig)
  name.vb: CanSerializeJson(Of IConfig)(IConfig)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(AetherUtils.Core.Configuration.IConfig)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: <
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(AetherUtils.Core.Configuration.IConfig)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
- uid: AetherUtils.Core.Configuration.IConfig.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  name: CanSerializeXml<IConfig>(IConfig)
  nameWithType: TypeExtensions.CanSerializeXml<IConfig>(IConfig)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml<AetherUtils.Core.Configuration.IConfig>(AetherUtils.Core.Configuration.IConfig)
  nameWithType.vb: TypeExtensions.CanSerializeXml(Of IConfig)(IConfig)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml(Of AetherUtils.Core.Configuration.IConfig)(AetherUtils.Core.Configuration.IConfig)
  name.vb: CanSerializeXml(Of IConfig)(IConfig)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(AetherUtils.Core.Configuration.IConfig)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: <
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(AetherUtils.Core.Configuration.IConfig)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
- uid: AetherUtils.Core.Configuration.IConfig.AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  name: SerializeJson<IConfig>(IConfig)
  nameWithType: TypeExtensions.SerializeJson<IConfig>(IConfig)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson<AetherUtils.Core.Configuration.IConfig>(AetherUtils.Core.Configuration.IConfig)
  nameWithType.vb: TypeExtensions.SerializeJson(Of IConfig)(IConfig)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson(Of AetherUtils.Core.Configuration.IConfig)(AetherUtils.Core.Configuration.IConfig)
  name.vb: SerializeJson(Of IConfig)(IConfig)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(AetherUtils.Core.Configuration.IConfig)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: <
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(AetherUtils.Core.Configuration.IConfig)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
- uid: AetherUtils.Core.Configuration.IConfig.AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  name: SerializeXml<IConfig>(IConfig)
  nameWithType: TypeExtensions.SerializeXml<IConfig>(IConfig)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml<AetherUtils.Core.Configuration.IConfig>(AetherUtils.Core.Configuration.IConfig)
  nameWithType.vb: TypeExtensions.SerializeXml(Of IConfig)(IConfig)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml(Of AetherUtils.Core.Configuration.IConfig)(AetherUtils.Core.Configuration.IConfig)
  name.vb: SerializeXml(Of IConfig)(IConfig)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(AetherUtils.Core.Configuration.IConfig)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: <
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(AetherUtils.Core.Configuration.IConfig)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Configuration.IConfig
    name: IConfig
    href: AetherUtils.Core.Configuration.IConfig.html
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  name: CanSerializeJson<T>(T)
  nameWithType: TypeExtensions.CanSerializeJson<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson<T>(T)
  nameWithType.vb: TypeExtensions.CanSerializeJson(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson(Of T)(T)
  name.vb: CanSerializeJson(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions
  commentId: T:AetherUtils.Core.Extensions.TypeExtensions
  parent: AetherUtils.Core.Extensions
  href: AetherUtils.Core.Extensions.TypeExtensions.html
  name: TypeExtensions
  nameWithType: TypeExtensions
  fullName: AetherUtils.Core.Extensions.TypeExtensions
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  name: CanSerializeXml<T>(T)
  nameWithType: TypeExtensions.CanSerializeXml<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml<T>(T)
  nameWithType.vb: TypeExtensions.CanSerializeXml(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml(Of T)(T)
  name.vb: CanSerializeXml(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  name: SerializeJson<T>(T)
  nameWithType: TypeExtensions.SerializeJson<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson<T>(T)
  nameWithType.vb: TypeExtensions.SerializeJson(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson(Of T)(T)
  name.vb: SerializeJson(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  name: SerializeXml<T>(T)
  nameWithType: TypeExtensions.SerializeXml<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml<T>(T)
  nameWithType.vb: TypeExtensions.SerializeXml(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml(Of T)(T)
  name.vb: SerializeXml(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions
  commentId: N:AetherUtils.Core.Extensions
  href: AetherUtils.html
  name: AetherUtils.Core.Extensions
  nameWithType: AetherUtils.Core.Extensions
  fullName: AetherUtils.Core.Extensions
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Extensions
    name: Extensions
    href: AetherUtils.Core.Extensions.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Extensions
    name: Extensions
    href: AetherUtils.Core.Extensions.html
- uid: AetherUtils.Core.Configuration.IConfig.ConfigFilePath*
  commentId: Overload:AetherUtils.Core.Configuration.IConfig.ConfigFilePath
  href: AetherUtils.Core.Configuration.IConfig.html#AetherUtils_Core_Configuration_IConfig_ConfigFilePath
  name: ConfigFilePath
  nameWithType: IConfig.ConfigFilePath
  fullName: AetherUtils.Core.Configuration.IConfig.ConfigFilePath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AetherUtils.Core.Configuration.IConfig.IsInitialized*
  commentId: Overload:AetherUtils.Core.Configuration.IConfig.IsInitialized
  href: AetherUtils.Core.Configuration.IConfig.html#AetherUtils_Core_Configuration_IConfig_IsInitialized
  name: IsInitialized
  nameWithType: IConfig.IsInitialized
  fullName: AetherUtils.Core.Configuration.IConfig.IsInitialized
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: AetherUtils.Core.Configuration.IConfig.ConfigFilePath
  commentId: P:AetherUtils.Core.Configuration.IConfig.ConfigFilePath
  parent: AetherUtils.Core.Configuration.IConfig
  href: AetherUtils.Core.Configuration.IConfig.html#AetherUtils_Core_Configuration_IConfig_ConfigFilePath
  name: ConfigFilePath
  nameWithType: IConfig.ConfigFilePath
  fullName: AetherUtils.Core.Configuration.IConfig.ConfigFilePath
- uid: AetherUtils.Core.Configuration.IConfig.ConfigExists*
  commentId: Overload:AetherUtils.Core.Configuration.IConfig.ConfigExists
  href: AetherUtils.Core.Configuration.IConfig.html#AetherUtils_Core_Configuration_IConfig_ConfigExists
  name: ConfigExists
  nameWithType: IConfig.ConfigExists
  fullName: AetherUtils.Core.Configuration.IConfig.ConfigExists
- uid: AetherUtils.Core.Configuration.IConfig
  commentId: T:AetherUtils.Core.Configuration.IConfig
  parent: AetherUtils.Core.Configuration
  href: AetherUtils.Core.Configuration.IConfig.html
  name: IConfig
  nameWithType: IConfig
  fullName: AetherUtils.Core.Configuration.IConfig
- uid: AetherUtils.Core.Configuration.IConfig.LoadAsync*
  commentId: Overload:AetherUtils.Core.Configuration.IConfig.LoadAsync
  href: AetherUtils.Core.Configuration.IConfig.html#AetherUtils_Core_Configuration_IConfig_LoadAsync
  name: LoadAsync
  nameWithType: IConfig.LoadAsync
  fullName: AetherUtils.Core.Configuration.IConfig.LoadAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: AetherUtils.Core.Configuration.IConfig.Load*
  commentId: Overload:AetherUtils.Core.Configuration.IConfig.Load
  href: AetherUtils.Core.Configuration.IConfig.html#AetherUtils_Core_Configuration_IConfig_Load
  name: Load
  nameWithType: IConfig.Load
  fullName: AetherUtils.Core.Configuration.IConfig.Load
- uid: AetherUtils.Core.Configuration.IConfig.SaveAsync*
  commentId: Overload:AetherUtils.Core.Configuration.IConfig.SaveAsync
  href: AetherUtils.Core.Configuration.IConfig.html#AetherUtils_Core_Configuration_IConfig_SaveAsync
  name: SaveAsync
  nameWithType: IConfig.SaveAsync
  fullName: AetherUtils.Core.Configuration.IConfig.SaveAsync
- uid: AetherUtils.Core.Configuration.IConfig.Save*
  commentId: Overload:AetherUtils.Core.Configuration.IConfig.Save
  href: AetherUtils.Core.Configuration.IConfig.html#AetherUtils_Core_Configuration_IConfig_Save
  name: Save
  nameWithType: IConfig.Save
  fullName: AetherUtils.Core.Configuration.IConfig.Save
- uid: AetherUtils.Core.Structs.ConfigOption
  commentId: T:AetherUtils.Core.Structs.ConfigOption
  parent: AetherUtils.Core.Structs
  href: AetherUtils.Core.Structs.ConfigOption.html
  name: ConfigOption
  nameWithType: ConfigOption
  fullName: AetherUtils.Core.Structs.ConfigOption
- uid: AetherUtils.Core.Configuration.IConfig.Get*
  commentId: Overload:AetherUtils.Core.Configuration.IConfig.Get
  href: AetherUtils.Core.Configuration.IConfig.html#AetherUtils_Core_Configuration_IConfig_Get_AetherUtils_Core_Structs_ConfigOption_
  name: Get
  nameWithType: IConfig.Get
  fullName: AetherUtils.Core.Configuration.IConfig.Get
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: AetherUtils.Core.Structs
  commentId: N:AetherUtils.Core.Structs
  href: AetherUtils.html
  name: AetherUtils.Core.Structs
  nameWithType: AetherUtils.Core.Structs
  fullName: AetherUtils.Core.Structs
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Structs
    name: Structs
    href: AetherUtils.Core.Structs.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Structs
    name: Structs
    href: AetherUtils.Core.Structs.html
- uid: AetherUtils.Core.Configuration.IConfig.Set*
  commentId: Overload:AetherUtils.Core.Configuration.IConfig.Set
  href: AetherUtils.Core.Configuration.IConfig.html#AetherUtils_Core_Configuration_IConfig_Set_AetherUtils_Core_Structs_ConfigOption_
  name: Set
  nameWithType: IConfig.Set
  fullName: AetherUtils.Core.Configuration.IConfig.Set
shouldSkipMarkup: true
