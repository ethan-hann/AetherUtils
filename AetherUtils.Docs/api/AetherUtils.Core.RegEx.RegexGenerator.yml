### YamlMime:ManagedReference
items:
- uid: AetherUtils.Core.RegEx.RegexGenerator
  commentId: T:AetherUtils.Core.RegEx.RegexGenerator
  id: RegexGenerator
  parent: AetherUtils.Core.RegEx
  children:
  - AetherUtils.Core.RegEx.RegexGenerator.Base64Regex
  - AetherUtils.Core.RegEx.RegexGenerator.HexRegex
  - AetherUtils.Core.RegEx.RegexGenerator.PathRegex
  langs:
  - csharp
  - vb
  name: RegexGenerator
  nameWithType: RegexGenerator
  fullName: AetherUtils.Core.RegEx.RegexGenerator
  type: Class
  source:
    id: RegexGenerator
    path: System.Text.RegularExpressions.Generator\System.Text.RegularExpressions.Generator.RegexGenerator\RegexGenerator.g.cs
    startLine: 76
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.RegEx
  summary: Represents various regular expression generators.
  example: []
  syntax:
    content: public static class RegexGenerator
    content.vb: Public Module RegexGenerator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: AetherUtils.Core.RegEx.RegexGenerator.PathRegex
  commentId: M:AetherUtils.Core.RegEx.RegexGenerator.PathRegex
  id: PathRegex
  parent: AetherUtils.Core.RegEx.RegexGenerator
  langs:
  - csharp
  - vb
  name: PathRegex()
  nameWithType: RegexGenerator.PathRegex()
  fullName: AetherUtils.Core.RegEx.RegexGenerator.PathRegex()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/RegEx/RegexGenerator.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: PathRegex
    path: ../AetherUtils.Core/RegEx/RegexGenerator.cs
    startLine: 13
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.RegEx
  remarks: >-
    Pattern:<br />

    <pre><code class="lang-csharp">^(([a-zA-Z]:)|(\\))(\\{1}|((\\{1})[^\\]([^/:*?&lt;&gt;"|]*))+)$</code></pre><br />

    Options:<br />

    <pre><code class="lang-csharp">RegexOptions.CultureInvariant</code></pre><br />

    Explanation:<br />

    <pre><code class="lang-csharp">○ Match if at the beginning of the string.

    ○ 1st capture group.
        ○ Match with 2 alternative expressions.
            ○ 2nd capture group.
                ○ Match a character in the set [A-Za-z].
                ○ Match ':'.
            ○ Match a sequence of expressions.
                ○ 3rd capture group.
                    ○ Match ')'.
                ○ Loop greedily at least once.
                    ○ 4th capture group.
                        ○ Match with 2 alternative expressions.
                            ○ Match the string "{1}".
                            ○ 5th capture group.
                                ○ 6th capture group.
                                    ○ Match the string "{1}".
                                ○ Match a character in the set [^"(*/:&lt;&gt;?[]^|] greedily any number of times.
    ○ Match if at the end of the string or if before an ending newline.</code></pre>
  example: []
  syntax:
    content: >-
      [GeneratedRegex("^(([a-zA-Z]:)|(\\))(\\{1}|((\\{1})[^\\]([^/:*?<>\"|]*))+)$", RegexOptions.CultureInvariant, 1000)]

      public static Regex PathRegex()
    return:
      type: System.Text.RegularExpressions.Regex
    content.vb: >-
      <GeneratedRegex("^(([a-zA-Z]:)|(\))(\{1}|((\{1})[^\]([^/:*?<>""|]*))+)$", RegexOptions.CultureInvariant, 1000)>

      Public Shared Function PathRegex() As Regex
  overload: AetherUtils.Core.RegEx.RegexGenerator.PathRegex*
  attributes:
  - type: System.Text.RegularExpressions.GeneratedRegexAttribute
    ctor: System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)
    arguments:
    - type: System.String
      value: ^(([a-zA-Z]:)|(\))(\{1}|((\{1})[^\]([^/:*?<>"|]*))+)$
    - type: System.Text.RegularExpressions.RegexOptions
      value: 512
    - type: System.Int32
      value: 1000
- uid: AetherUtils.Core.RegEx.RegexGenerator.Base64Regex
  commentId: M:AetherUtils.Core.RegEx.RegexGenerator.Base64Regex
  id: Base64Regex
  parent: AetherUtils.Core.RegEx.RegexGenerator
  langs:
  - csharp
  - vb
  name: Base64Regex()
  nameWithType: RegexGenerator.Base64Regex()
  fullName: AetherUtils.Core.RegEx.RegexGenerator.Base64Regex()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/RegEx/RegexGenerator.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: Base64Regex
    path: ../AetherUtils.Core/RegEx/RegexGenerator.cs
    startLine: 20
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.RegEx
  remarks: >-
    Pattern:<br />

    <pre><code class="lang-csharp">^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$</code></pre><br />

    Options:<br />

    <pre><code class="lang-csharp">RegexOptions.CultureInvariant</code></pre><br />

    Explanation:<br />

    <pre><code class="lang-csharp">○ Match if at the beginning of the string.

    ○ Loop greedily any number of times.
        ○ 1st capture group.
            ○ Match a character in the set [+/-9A-Za-z] exactly 4 times.
    ○ Optional (greedy).
        ○ 2nd capture group.
            ○ Match with 2 alternative expressions.
                ○ Match a sequence of expressions.
                    ○ Match a character in the set [+/-9A-Za-z] exactly 3 times.
                    ○ Match '='.
                ○ Match a sequence of expressions.
                    ○ Match a character in the set [+/-9A-Za-z] exactly 2 times.
                    ○ Match the string "==".
    ○ Match if at the end of the string or if before an ending newline.</code></pre>
  example: []
  syntax:
    content: >-
      [GeneratedRegex("^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$", RegexOptions.CultureInvariant, 1000)]

      public static Regex Base64Regex()
    return:
      type: System.Text.RegularExpressions.Regex
    content.vb: >-
      <GeneratedRegex("^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$", RegexOptions.CultureInvariant, 1000)>

      Public Shared Function Base64Regex() As Regex
  overload: AetherUtils.Core.RegEx.RegexGenerator.Base64Regex*
  attributes:
  - type: System.Text.RegularExpressions.GeneratedRegexAttribute
    ctor: System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)
    arguments:
    - type: System.String
      value: ^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$
    - type: System.Text.RegularExpressions.RegexOptions
      value: 512
    - type: System.Int32
      value: 1000
- uid: AetherUtils.Core.RegEx.RegexGenerator.HexRegex
  commentId: M:AetherUtils.Core.RegEx.RegexGenerator.HexRegex
  id: HexRegex
  parent: AetherUtils.Core.RegEx.RegexGenerator
  langs:
  - csharp
  - vb
  name: HexRegex()
  nameWithType: RegexGenerator.HexRegex()
  fullName: AetherUtils.Core.RegEx.RegexGenerator.HexRegex()
  type: Method
  source:
    remote:
      path: AetherUtils.Core/RegEx/RegexGenerator.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: HexRegex
    path: ../AetherUtils.Core/RegEx/RegexGenerator.cs
    startLine: 27
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.RegEx
  remarks: >-
    Pattern:<br />

    <pre><code class="lang-csharp">^(0x|0X)?[a-fA-F0-9]+$</code></pre><br />

    Options:<br />

    <pre><code class="lang-csharp">RegexOptions.CultureInvariant</code></pre><br />

    Explanation:<br />

    <pre><code class="lang-csharp">○ Match if at the beginning of the string.

    ○ Optional (greedy).
        ○ 1st capture group.
            ○ Match '0'.
            ○ Match a character in the set [Xx].
    ○ Match a character in the set [0-9A-Fa-f] atomically at least once.

    ○ Match if at the end of the string or if before an ending newline.</code></pre>
  example: []
  syntax:
    content: >-
      [GeneratedRegex("^(0x|0X)?[a-fA-F0-9]+$", RegexOptions.CultureInvariant, 1000)]

      public static Regex HexRegex()
    return:
      type: System.Text.RegularExpressions.Regex
    content.vb: >-
      <GeneratedRegex("^(0x|0X)?[a-fA-F0-9]+$", RegexOptions.CultureInvariant, 1000)>

      Public Shared Function HexRegex() As Regex
  overload: AetherUtils.Core.RegEx.RegexGenerator.HexRegex*
  attributes:
  - type: System.Text.RegularExpressions.GeneratedRegexAttribute
    ctor: System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)
    arguments:
    - type: System.String
      value: ^(0x|0X)?[a-fA-F0-9]+$
    - type: System.Text.RegularExpressions.RegexOptions
      value: 512
    - type: System.Int32
      value: 1000
references:
- uid: AetherUtils.Core.RegEx
  commentId: N:AetherUtils.Core.RegEx
  href: AetherUtils.html
  name: AetherUtils.Core.RegEx
  nameWithType: AetherUtils.Core.RegEx
  fullName: AetherUtils.Core.RegEx
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.RegEx
    name: RegEx
    href: AetherUtils.Core.RegEx.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.RegEx
    name: RegEx
    href: AetherUtils.Core.RegEx.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AetherUtils.Core.RegEx.RegexGenerator.PathRegex*
  commentId: Overload:AetherUtils.Core.RegEx.RegexGenerator.PathRegex
  href: AetherUtils.Core.RegEx.RegexGenerator.html#AetherUtils_Core_RegEx_RegexGenerator_PathRegex
  name: PathRegex
  nameWithType: RegexGenerator.PathRegex
  fullName: AetherUtils.Core.RegEx.RegexGenerator.PathRegex
- uid: System.Text.RegularExpressions.Regex
  commentId: T:System.Text.RegularExpressions.Regex
  parent: System.Text.RegularExpressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions.regex
  name: Regex
  nameWithType: Regex
  fullName: System.Text.RegularExpressions.Regex
- uid: System.Text.RegularExpressions
  commentId: N:System.Text.RegularExpressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text.RegularExpressions
  nameWithType: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.RegularExpressions
    name: RegularExpressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  - name: .
  - uid: System.Text.RegularExpressions
    name: RegularExpressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.regularexpressions
- uid: AetherUtils.Core.RegEx.RegexGenerator.Base64Regex*
  commentId: Overload:AetherUtils.Core.RegEx.RegexGenerator.Base64Regex
  href: AetherUtils.Core.RegEx.RegexGenerator.html#AetherUtils_Core_RegEx_RegexGenerator_Base64Regex
  name: Base64Regex
  nameWithType: RegexGenerator.Base64Regex
  fullName: AetherUtils.Core.RegEx.RegexGenerator.Base64Regex
- uid: AetherUtils.Core.RegEx.RegexGenerator.HexRegex*
  commentId: Overload:AetherUtils.Core.RegEx.RegexGenerator.HexRegex
  href: AetherUtils.Core.RegEx.RegexGenerator.html#AetherUtils_Core_RegEx_RegexGenerator_HexRegex
  name: HexRegex
  nameWithType: RegexGenerator.HexRegex
  fullName: AetherUtils.Core.RegEx.RegexGenerator.HexRegex
shouldSkipMarkup: true
