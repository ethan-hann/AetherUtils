### YamlMime:ManagedReference
items:
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  commentId: T:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  id: TwoFactorAuth
  parent: AetherUtils.Core.Security.TwoFactor
  children:
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.#ctor
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.#ctor(AetherUtils.Core.Security.TwoFactor.HashType)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval(System.Byte[],System.Int64,System.Int32)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval(System.String,System.Int64,System.Int32,System.Boolean)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GenerateSetupInformation(AetherUtils.Core.Security.TwoFactor.TwoFactorUser@,System.Byte[])
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.Byte[])
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.Byte[],System.DateTime)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String,System.Boolean)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String,System.DateTime,System.Boolean)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.Byte[])
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.Byte[],System.Int32)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.Byte[],System.TimeSpan)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.String,System.Boolean)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.String,System.TimeSpan,System.Boolean)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.Byte[],System.String)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.Byte[],System.String,System.Int32)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.Byte[],System.String,System.TimeSpan)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.String,System.String,System.Boolean)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.String,System.String,System.Int32,System.Boolean)
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.String,System.String,System.TimeSpan,System.Boolean)
  langs:
  - csharp
  - vb
  name: TwoFactorAuth
  nameWithType: TwoFactorAuth
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  type: Class
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: TwoFactorAuth
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 12
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Provides methods to generate and validate two-factor authentication codes.
  example: []
  syntax:
    content: public class TwoFactorAuth
    content.vb: Public Class TwoFactorAuth
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1
  - AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.#ctor(AetherUtils.Core.Security.TwoFactor.HashType)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.#ctor(AetherUtils.Core.Security.TwoFactor.HashType)
  id: '#ctor(AetherUtils.Core.Security.TwoFactor.HashType)'
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: TwoFactorAuth(HashType)
  nameWithType: TwoFactorAuth.TwoFactorAuth(HashType)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.TwoFactorAuth(AetherUtils.Core.Security.TwoFactor.HashType)
  type: Constructor
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: .ctor
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 12
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Provides methods to generate and validate two-factor authentication codes.
  example: []
  syntax:
    content: public TwoFactorAuth(HashType hashType)
    parameters:
    - id: hashType
      type: AetherUtils.Core.Security.TwoFactor.HashType
      description: The <xref href="AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.HashType" data-throw-if-not-resolved="false"></xref> for the generated codes.
    content.vb: Public Sub New(hashType As HashType)
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.#ctor*
  nameWithType.vb: TwoFactorAuth.New(HashType)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.New(AetherUtils.Core.Security.TwoFactor.HashType)
  name.vb: New(HashType)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.#ctor
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.#ctor
  id: '#ctor'
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: TwoFactorAuth()
  nameWithType: TwoFactorAuth.TwoFactorAuth()
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.TwoFactorAuth()
  type: Constructor
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: .ctor
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 20
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  syntax:
    content: public TwoFactorAuth()
    content.vb: Public Sub New()
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.#ctor*
  nameWithType.vb: TwoFactorAuth.New()
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.New()
  name.vb: New()
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GenerateSetupInformation(AetherUtils.Core.Security.TwoFactor.TwoFactorUser@,System.Byte[])
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GenerateSetupInformation(AetherUtils.Core.Security.TwoFactor.TwoFactorUser@,System.Byte[])
  id: GenerateSetupInformation(AetherUtils.Core.Security.TwoFactor.TwoFactorUser@,System.Byte[])
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GenerateSetupInformation(ref TwoFactorUser, byte[])
  nameWithType: TwoFactorAuth.GenerateSetupInformation(ref TwoFactorUser, byte[])
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GenerateSetupInformation(ref AetherUtils.Core.Security.TwoFactor.TwoFactorUser, byte[])
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GenerateSetupInformation
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 28
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Generate the setup information needed for a user to scan with their authenticator app.
  example: []
  syntax:
    content: public void GenerateSetupInformation(ref TwoFactorUser user, byte[] secretKey)
    parameters:
    - id: user
      type: AetherUtils.Core.Security.TwoFactor.TwoFactorUser
      description: The <xref href="AetherUtils.Core.Security.TwoFactor.TwoFactorUser" data-throw-if-not-resolved="false"></xref> containing the setup information, as a reference.
    - id: secretKey
      type: System.Byte[]
      description: The secret key used to generate the setup information.
    content.vb: Public Sub GenerateSetupInformation(user As TwoFactorUser, secretKey As Byte())
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GenerateSetupInformation*
  nameWithType.vb: TwoFactorAuth.GenerateSetupInformation(TwoFactorUser, Byte())
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GenerateSetupInformation(AetherUtils.Core.Security.TwoFactor.TwoFactorUser, Byte())
  name.vb: GenerateSetupInformation(TwoFactorUser, Byte())
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval(System.String,System.Int64,System.Int32,System.Boolean)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval(System.String,System.Int64,System.Int32,System.Boolean)
  id: GeneratePinAtInterval(System.String,System.Int64,System.Int32,System.Boolean)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GeneratePinAtInterval(string, long, int, bool)
  nameWithType: TwoFactorAuth.GeneratePinAtInterval(string, long, int, bool)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval(string, long, int, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GeneratePinAtInterval
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 91
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: This method is generally called via <xref href="AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public string GeneratePinAtInterval(string accountSecretKey, long counter, int digits = 6, bool secretIsBase32 = false)
    parameters:
    - id: accountSecretKey
      type: System.String
      description: The account secret key as a string
    - id: counter
      type: System.Int64
      description: The number of 30-second (by default) intervals since the unix epoch
    - id: digits
      type: System.Int32
      description: The desired length of the returned PIN
    - id: secretIsBase32
      type: System.Boolean
      description: Flag saying if accountSecretKey is in Base32 format or original secret
    return:
      type: System.String
      description: A 'PIN' that is valid for the specified time interval
    content.vb: Public Function GeneratePinAtInterval(accountSecretKey As String, counter As Long, digits As Integer = 6, secretIsBase32 As Boolean = False) As String
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval*
  nameWithType.vb: TwoFactorAuth.GeneratePinAtInterval(String, Long, Integer, Boolean)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval(String, Long, Integer, Boolean)
  name.vb: GeneratePinAtInterval(String, Long, Integer, Boolean)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval(System.Byte[],System.Int64,System.Int32)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval(System.Byte[],System.Int64,System.Int32)
  id: GeneratePinAtInterval(System.Byte[],System.Int64,System.Int32)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GeneratePinAtInterval(byte[], long, int)
  nameWithType: TwoFactorAuth.GeneratePinAtInterval(byte[], long, int)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval(byte[], long, int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GeneratePinAtInterval
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 101
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: This method is generally called via <xref href="AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>/&gt;
  example: []
  syntax:
    content: public string GeneratePinAtInterval(byte[] accountSecretKey, long counter, int digits = 6)
    parameters:
    - id: accountSecretKey
      type: System.Byte[]
      description: The account secret key as a byte array
    - id: counter
      type: System.Int64
      description: The number of 30-second (by default) intervals since the unix epoch
    - id: digits
      type: System.Int32
      description: The desired length of the returned PIN
    return:
      type: System.String
      description: A 'PIN' that is valid for the specified time interval
    content.vb: Public Function GeneratePinAtInterval(accountSecretKey As Byte(), counter As Long, digits As Integer = 6) As String
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval*
  nameWithType.vb: TwoFactorAuth.GeneratePinAtInterval(Byte(), Long, Integer)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval(Byte(), Long, Integer)
  name.vb: GeneratePinAtInterval(Byte(), Long, Integer)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.String,System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.String,System.String,System.Boolean)
  id: ValidateTwoFactorPin(System.String,System.String,System.Boolean)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: ValidateTwoFactorPin(string, string, bool)
  nameWithType: TwoFactorAuth.ValidateTwoFactorPin(string, string, bool)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(string, string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ValidateTwoFactorPin
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 144
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Given a PIN from a client, check if it is valid at the current time.
  example: []
  syntax:
    content: public bool ValidateTwoFactorPin(string accountSecretKey, string twoFactorCodeFromClient, bool secretIsBase32 = false)
    parameters:
    - id: accountSecretKey
      type: System.String
      description: Account Secret Key
    - id: twoFactorCodeFromClient
      type: System.String
      description: The PIN from the client
    - id: secretIsBase32
      type: System.Boolean
      description: Flag saying if accountSecretKey is in Base32 format or original secret
    return:
      type: System.Boolean
      description: True if PIN is currently valid
    content.vb: Public Function ValidateTwoFactorPin(accountSecretKey As String, twoFactorCodeFromClient As String, secretIsBase32 As Boolean = False) As Boolean
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin*
  nameWithType.vb: TwoFactorAuth.ValidateTwoFactorPin(String, String, Boolean)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(String, String, Boolean)
  name.vb: ValidateTwoFactorPin(String, String, Boolean)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.String,System.String,System.TimeSpan,System.Boolean)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.String,System.String,System.TimeSpan,System.Boolean)
  id: ValidateTwoFactorPin(System.String,System.String,System.TimeSpan,System.Boolean)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: ValidateTwoFactorPin(string, string, TimeSpan, bool)
  nameWithType: TwoFactorAuth.ValidateTwoFactorPin(string, string, TimeSpan, bool)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(string, string, System.TimeSpan, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ValidateTwoFactorPin
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 155
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Given a PIN from a client, check if it is valid at the current time.
  example: []
  syntax:
    content: public bool ValidateTwoFactorPin(string accountSecretKey, string twoFactorCodeFromClient, TimeSpan timeTolerance, bool secretIsBase32 = false)
    parameters:
    - id: accountSecretKey
      type: System.String
      description: Account Secret Key
    - id: twoFactorCodeFromClient
      type: System.String
      description: The PIN from the client
    - id: timeTolerance
      type: System.TimeSpan
      description: The time window within which to check to allow for clock drift between devices.
    - id: secretIsBase32
      type: System.Boolean
      description: Flag saying if accountSecretKey is in Base32 format or original secret
    return:
      type: System.Boolean
      description: True if PIN is currently valid
    content.vb: Public Function ValidateTwoFactorPin(accountSecretKey As String, twoFactorCodeFromClient As String, timeTolerance As TimeSpan, secretIsBase32 As Boolean = False) As Boolean
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin*
  nameWithType.vb: TwoFactorAuth.ValidateTwoFactorPin(String, String, TimeSpan, Boolean)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(String, String, System.TimeSpan, Boolean)
  name.vb: ValidateTwoFactorPin(String, String, TimeSpan, Boolean)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.Byte[],System.String)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.Byte[],System.String)
  id: ValidateTwoFactorPin(System.Byte[],System.String)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: ValidateTwoFactorPin(byte[], string)
  nameWithType: TwoFactorAuth.ValidateTwoFactorPin(byte[], string)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(byte[], string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ValidateTwoFactorPin
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 164
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Given a PIN from a client, check if it is valid at the current time.
  example: []
  syntax:
    content: public bool ValidateTwoFactorPin(byte[] accountSecretKey, string twoFactorCodeFromClient)
    parameters:
    - id: accountSecretKey
      type: System.Byte[]
      description: Account Secret Key
    - id: twoFactorCodeFromClient
      type: System.String
      description: The PIN from the client
    return:
      type: System.Boolean
      description: True if PIN is currently valid
    content.vb: Public Function ValidateTwoFactorPin(accountSecretKey As Byte(), twoFactorCodeFromClient As String) As Boolean
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin*
  nameWithType.vb: TwoFactorAuth.ValidateTwoFactorPin(Byte(), String)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(Byte(), String)
  name.vb: ValidateTwoFactorPin(Byte(), String)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.Byte[],System.String,System.TimeSpan)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.Byte[],System.String,System.TimeSpan)
  id: ValidateTwoFactorPin(System.Byte[],System.String,System.TimeSpan)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: ValidateTwoFactorPin(byte[], string, TimeSpan)
  nameWithType: TwoFactorAuth.ValidateTwoFactorPin(byte[], string, TimeSpan)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(byte[], string, System.TimeSpan)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ValidateTwoFactorPin
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 174
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Given a PIN from a client, check if it is valid at the current time.
  example: []
  syntax:
    content: public bool ValidateTwoFactorPin(byte[] accountSecretKey, string twoFactorCodeFromClient, TimeSpan timeTolerance)
    parameters:
    - id: accountSecretKey
      type: System.Byte[]
      description: Account Secret Key
    - id: twoFactorCodeFromClient
      type: System.String
      description: The PIN from the client
    - id: timeTolerance
      type: System.TimeSpan
      description: The time window within which to check to allow for clock drift between devices.
    return:
      type: System.Boolean
      description: True if PIN is currently valid
    content.vb: Public Function ValidateTwoFactorPin(accountSecretKey As Byte(), twoFactorCodeFromClient As String, timeTolerance As TimeSpan) As Boolean
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin*
  nameWithType.vb: TwoFactorAuth.ValidateTwoFactorPin(Byte(), String, TimeSpan)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(Byte(), String, System.TimeSpan)
  name.vb: ValidateTwoFactorPin(Byte(), String, TimeSpan)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.String,System.String,System.Int32,System.Boolean)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.String,System.String,System.Int32,System.Boolean)
  id: ValidateTwoFactorPin(System.String,System.String,System.Int32,System.Boolean)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: ValidateTwoFactorPin(string, string, int, bool)
  nameWithType: TwoFactorAuth.ValidateTwoFactorPin(string, string, int, bool)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(string, string, int, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ValidateTwoFactorPin
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 185
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Given a PIN from a client, check if it is valid at the current time.
  example: []
  syntax:
    content: public bool ValidateTwoFactorPin(string accountSecretKey, string twoFactorCodeFromClient, int iterationOffset, bool secretIsBase32 = false)
    parameters:
    - id: accountSecretKey
      type: System.String
      description: Account Secret Key
    - id: twoFactorCodeFromClient
      type: System.String
      description: The PIN from the client
    - id: iterationOffset
      type: System.Int32
      description: The counter window within which to check to allow for clock drift between devices.
    - id: secretIsBase32
      type: System.Boolean
      description: Flag saying if accountSecretKey is in Base32 format or original secret
    return:
      type: System.Boolean
      description: True if PIN is currently valid
    content.vb: Public Function ValidateTwoFactorPin(accountSecretKey As String, twoFactorCodeFromClient As String, iterationOffset As Integer, secretIsBase32 As Boolean = False) As Boolean
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin*
  nameWithType.vb: TwoFactorAuth.ValidateTwoFactorPin(String, String, Integer, Boolean)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(String, String, Integer, Boolean)
  name.vb: ValidateTwoFactorPin(String, String, Integer, Boolean)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.Byte[],System.String,System.Int32)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(System.Byte[],System.String,System.Int32)
  id: ValidateTwoFactorPin(System.Byte[],System.String,System.Int32)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: ValidateTwoFactorPin(byte[], string, int)
  nameWithType: TwoFactorAuth.ValidateTwoFactorPin(byte[], string, int)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(byte[], string, int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ValidateTwoFactorPin
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 195
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Given a PIN from a client, check if it is valid at the current time.
  example: []
  syntax:
    content: public bool ValidateTwoFactorPin(byte[] accountSecretKey, string twoFactorCodeFromClient, int iterationOffset)
    parameters:
    - id: accountSecretKey
      type: System.Byte[]
      description: Account Secret Key
    - id: twoFactorCodeFromClient
      type: System.String
      description: The PIN from the client
    - id: iterationOffset
      type: System.Int32
      description: The counter window within which to check to allow for clock drift between devices.
    return:
      type: System.Boolean
      description: True if PIN is currently valid
    content.vb: Public Function ValidateTwoFactorPin(accountSecretKey As Byte(), twoFactorCodeFromClient As String, iterationOffset As Integer) As Boolean
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin*
  nameWithType.vb: TwoFactorAuth.ValidateTwoFactorPin(Byte(), String, Integer)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin(Byte(), String, Integer)
  name.vb: ValidateTwoFactorPin(Byte(), String, Integer)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String,System.Boolean)
  id: GetCurrentPin(System.String,System.Boolean)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GetCurrentPin(string, bool)
  nameWithType: TwoFactorAuth.GetCurrentPin(string, bool)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetCurrentPin
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 205
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: >-
    Get the PIN for current time; the same code that a 2FA app would generate for the current time.

    Do not validate directly against this as clock drift may cause a different PIN to be generated than one you did a second ago.
  example: []
  syntax:
    content: public string GetCurrentPin(string accountSecretKey, bool secretIsBase32 = false)
    parameters:
    - id: accountSecretKey
      type: System.String
      description: Account Secret Key
    - id: secretIsBase32
      type: System.Boolean
      description: Flag saying if accountSecretKey is in Base32 format or original secret
    return:
      type: System.String
      description: A 6-digit PIN
    content.vb: Public Function GetCurrentPin(accountSecretKey As String, secretIsBase32 As Boolean = False) As String
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin*
  nameWithType.vb: TwoFactorAuth.GetCurrentPin(String, Boolean)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(String, Boolean)
  name.vb: GetCurrentPin(String, Boolean)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String,System.DateTime,System.Boolean)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String,System.DateTime,System.Boolean)
  id: GetCurrentPin(System.String,System.DateTime,System.Boolean)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GetCurrentPin(string, DateTime, bool)
  nameWithType: TwoFactorAuth.GetCurrentPin(string, DateTime, bool)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(string, System.DateTime, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetCurrentPin
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 216
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: >-
    Get the PIN for current time; the same code that a 2FA app would generate for the current time.

    Do not validate directly against this as clock drift may cause a different PIN to be generated than one you did a second ago.
  example: []
  syntax:
    content: public string GetCurrentPin(string accountSecretKey, DateTime now, bool secretIsBase32 = false)
    parameters:
    - id: accountSecretKey
      type: System.String
      description: Account Secret Key
    - id: now
      type: System.DateTime
      description: The time you wish to generate the pin for
    - id: secretIsBase32
      type: System.Boolean
      description: Flag saying if accountSecretKey is in Base32 format or original secret
    return:
      type: System.String
      description: A 6-digit PIN
    content.vb: Public Function GetCurrentPin(accountSecretKey As String, now As Date, secretIsBase32 As Boolean = False) As String
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin*
  nameWithType.vb: TwoFactorAuth.GetCurrentPin(String, Date, Boolean)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(String, Date, Boolean)
  name.vb: GetCurrentPin(String, Date, Boolean)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.Byte[])
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.Byte[])
  id: GetCurrentPin(System.Byte[])
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GetCurrentPin(byte[])
  nameWithType: TwoFactorAuth.GetCurrentPin(byte[])
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(byte[])
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetCurrentPin
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 225
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: >-
    Get the PIN for current time; the same code that a 2FA app would generate for the current time.

    Do not validate directly against this as clock drift may cause a different PIN to be generated.
  example: []
  syntax:
    content: public string GetCurrentPin(byte[] accountSecretKey)
    parameters:
    - id: accountSecretKey
      type: System.Byte[]
      description: Account Secret Key
    return:
      type: System.String
      description: A 6-digit PIN
    content.vb: Public Function GetCurrentPin(accountSecretKey As Byte()) As String
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin*
  nameWithType.vb: TwoFactorAuth.GetCurrentPin(Byte())
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(Byte())
  name.vb: GetCurrentPin(Byte())
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.Byte[],System.DateTime)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.Byte[],System.DateTime)
  id: GetCurrentPin(System.Byte[],System.DateTime)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GetCurrentPin(byte[], DateTime)
  nameWithType: TwoFactorAuth.GetCurrentPin(byte[], DateTime)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(byte[], System.DateTime)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetCurrentPin
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 235
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: >-
    Get the PIN for current time; the same code that a 2FA app would generate for the current time.

    Do not validate directly against this as clock drift may cause a different PIN to be generated.
  example: []
  syntax:
    content: public string GetCurrentPin(byte[] accountSecretKey, DateTime now)
    parameters:
    - id: accountSecretKey
      type: System.Byte[]
      description: Account Secret Key
    - id: now
      type: System.DateTime
      description: The time you wish to generate the pin for
    return:
      type: System.String
      description: A 6-digit PIN
    content.vb: Public Function GetCurrentPin(accountSecretKey As Byte(), now As Date) As String
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin*
  nameWithType.vb: TwoFactorAuth.GetCurrentPin(Byte(), Date)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(Byte(), Date)
  name.vb: GetCurrentPin(Byte(), Date)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.String,System.Boolean)
  id: GetCurrentPins(System.String,System.Boolean)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GetCurrentPins(string, bool)
  nameWithType: TwoFactorAuth.GetCurrentPins(string, bool)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetCurrentPins
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 244
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Get all the PINs that would be valid within the time window allowed for by the default clock drift.
  example: []
  syntax:
    content: public string[] GetCurrentPins(string accountSecretKey, bool secretIsBase32 = false)
    parameters:
    - id: accountSecretKey
      type: System.String
      description: Account Secret Key
    - id: secretIsBase32
      type: System.Boolean
      description: Flag saying if accountSecretKey is in Base32 format or original secret
    return:
      type: System.String[]
      description: ''
    content.vb: Public Function GetCurrentPins(accountSecretKey As String, secretIsBase32 As Boolean = False) As String()
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins*
  nameWithType.vb: TwoFactorAuth.GetCurrentPins(String, Boolean)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(String, Boolean)
  name.vb: GetCurrentPins(String, Boolean)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.String,System.TimeSpan,System.Boolean)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.String,System.TimeSpan,System.Boolean)
  id: GetCurrentPins(System.String,System.TimeSpan,System.Boolean)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GetCurrentPins(string, TimeSpan, bool)
  nameWithType: TwoFactorAuth.GetCurrentPins(string, TimeSpan, bool)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(string, System.TimeSpan, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetCurrentPins
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 254
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Get all the PINs that would be valid within the time window allowed for by the specified clock drift.
  example: []
  syntax:
    content: public string[] GetCurrentPins(string accountSecretKey, TimeSpan timeTolerance, bool secretIsBase32 = false)
    parameters:
    - id: accountSecretKey
      type: System.String
      description: Account Secret Key
    - id: timeTolerance
      type: System.TimeSpan
      description: The clock drift size you want to generate PINs for
    - id: secretIsBase32
      type: System.Boolean
      description: Flag saying if accountSecretKey is in Base32 format or original secret
    return:
      type: System.String[]
      description: ''
    content.vb: Public Function GetCurrentPins(accountSecretKey As String, timeTolerance As TimeSpan, secretIsBase32 As Boolean = False) As String()
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins*
  nameWithType.vb: TwoFactorAuth.GetCurrentPins(String, TimeSpan, Boolean)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(String, System.TimeSpan, Boolean)
  name.vb: GetCurrentPins(String, TimeSpan, Boolean)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.Byte[])
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.Byte[])
  id: GetCurrentPins(System.Byte[])
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GetCurrentPins(byte[])
  nameWithType: TwoFactorAuth.GetCurrentPins(byte[])
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(byte[])
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetCurrentPins
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 262
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Get all the PINs that would be valid within the time window allowed for by the default clock drift.
  example: []
  syntax:
    content: public string[] GetCurrentPins(byte[] accountSecretKey)
    parameters:
    - id: accountSecretKey
      type: System.Byte[]
      description: Account Secret Key
    return:
      type: System.String[]
      description: ''
    content.vb: Public Function GetCurrentPins(accountSecretKey As Byte()) As String()
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins*
  nameWithType.vb: TwoFactorAuth.GetCurrentPins(Byte())
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(Byte())
  name.vb: GetCurrentPins(Byte())
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.Byte[],System.TimeSpan)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.Byte[],System.TimeSpan)
  id: GetCurrentPins(System.Byte[],System.TimeSpan)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GetCurrentPins(byte[], TimeSpan)
  nameWithType: TwoFactorAuth.GetCurrentPins(byte[], TimeSpan)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(byte[], System.TimeSpan)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetCurrentPins
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 271
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Get all the PINs that would be valid within the time window allowed for by the specified clock drift.
  example: []
  syntax:
    content: public string[] GetCurrentPins(byte[] accountSecretKey, TimeSpan timeTolerance)
    parameters:
    - id: accountSecretKey
      type: System.Byte[]
      description: Account Secret Key
    - id: timeTolerance
      type: System.TimeSpan
      description: The clock drift size you want to generate PINs for
    return:
      type: System.String[]
      description: ''
    content.vb: Public Function GetCurrentPins(accountSecretKey As Byte(), timeTolerance As TimeSpan) As String()
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins*
  nameWithType.vb: TwoFactorAuth.GetCurrentPins(Byte(), TimeSpan)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(Byte(), System.TimeSpan)
  name.vb: GetCurrentPins(Byte(), TimeSpan)
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.Byte[],System.Int32)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(System.Byte[],System.Int32)
  id: GetCurrentPins(System.Byte[],System.Int32)
  parent: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
  langs:
  - csharp
  - vb
  name: GetCurrentPins(byte[], int)
  nameWithType: TwoFactorAuth.GetCurrentPins(byte[], int)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(byte[], int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetCurrentPins
    path: ../AetherUtils.Core/Security/TwoFactor/TwoFactorAuth.cs
    startLine: 287
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.TwoFactor
  summary: Get all the PINs that would be valid within the time window allowed for by the specified clock drift.
  example: []
  syntax:
    content: public string[] GetCurrentPins(byte[] accountSecretKey, int iterationOffset)
    parameters:
    - id: accountSecretKey
      type: System.Byte[]
      description: Account Secret Key
    - id: iterationOffset
      type: System.Int32
      description: The counter drift size you want to generate PINs for
    return:
      type: System.String[]
      description: ''
    content.vb: Public Function GetCurrentPins(accountSecretKey As Byte(), iterationOffset As Integer) As String()
  overload: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins*
  nameWithType.vb: TwoFactorAuth.GetCurrentPins(Byte(), Integer)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins(Byte(), Integer)
  name.vb: GetCurrentPins(Byte(), Integer)
references:
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.HashType
  commentId: P:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.HashType
  href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html#AetherUtils_Core_Security_TwoFactor_TwoFactorAuth_HashType
  name: HashType
  nameWithType: TwoFactorAuth.HashType
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.HashType
- uid: AetherUtils.Core.Security.TwoFactor
  commentId: N:AetherUtils.Core.Security.TwoFactor
  href: AetherUtils.html
  name: AetherUtils.Core.Security.TwoFactor
  nameWithType: AetherUtils.Core.Security.TwoFactor
  fullName: AetherUtils.Core.Security.TwoFactor
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Security
    name: Security
    href: AetherUtils.Core.Security.html
  - name: .
  - uid: AetherUtils.Core.Security.TwoFactor
    name: TwoFactor
    href: AetherUtils.Core.Security.TwoFactor.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Security
    name: Security
    href: AetherUtils.Core.Security.html
  - name: .
  - uid: AetherUtils.Core.Security.TwoFactor
    name: TwoFactor
    href: AetherUtils.Core.Security.TwoFactor.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  name: CanSerializeJson<TwoFactorAuth>(TwoFactorAuth)
  nameWithType: TypeExtensions.CanSerializeJson<TwoFactorAuth>(TwoFactorAuth)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson<AetherUtils.Core.Security.TwoFactor.TwoFactorAuth>(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
  nameWithType.vb: TypeExtensions.CanSerializeJson(Of TwoFactorAuth)(TwoFactorAuth)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson(Of AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
  name.vb: CanSerializeJson(Of TwoFactorAuth)(TwoFactorAuth)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  name: CanSerializeXml<TwoFactorAuth>(TwoFactorAuth)
  nameWithType: TypeExtensions.CanSerializeXml<TwoFactorAuth>(TwoFactorAuth)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml<AetherUtils.Core.Security.TwoFactor.TwoFactorAuth>(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
  nameWithType.vb: TypeExtensions.CanSerializeXml(Of TwoFactorAuth)(TwoFactorAuth)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml(Of AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
  name.vb: CanSerializeXml(Of TwoFactorAuth)(TwoFactorAuth)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  name: SerializeJson<TwoFactorAuth>(TwoFactorAuth)
  nameWithType: TypeExtensions.SerializeJson<TwoFactorAuth>(TwoFactorAuth)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson<AetherUtils.Core.Security.TwoFactor.TwoFactorAuth>(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
  nameWithType.vb: TypeExtensions.SerializeJson(Of TwoFactorAuth)(TwoFactorAuth)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson(Of AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
  name.vb: SerializeJson(Of TwoFactorAuth)(TwoFactorAuth)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  name: SerializeXml<TwoFactorAuth>(TwoFactorAuth)
  nameWithType: TypeExtensions.SerializeXml<TwoFactorAuth>(TwoFactorAuth)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml<AetherUtils.Core.Security.TwoFactor.TwoFactorAuth>(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
  nameWithType.vb: TypeExtensions.SerializeXml(Of TwoFactorAuth)(TwoFactorAuth)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml(Of AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
  name.vb: SerializeXml(Of TwoFactorAuth)(TwoFactorAuth)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(AetherUtils.Core.Security.TwoFactor.TwoFactorAuth)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth
    name: TwoFactorAuth
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  name: CanSerializeJson<T>(T)
  nameWithType: TypeExtensions.CanSerializeJson<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson<T>(T)
  nameWithType.vb: TypeExtensions.CanSerializeJson(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson(Of T)(T)
  name.vb: CanSerializeJson(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions
  commentId: T:AetherUtils.Core.Extensions.TypeExtensions
  parent: AetherUtils.Core.Extensions
  href: AetherUtils.Core.Extensions.TypeExtensions.html
  name: TypeExtensions
  nameWithType: TypeExtensions
  fullName: AetherUtils.Core.Extensions.TypeExtensions
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  name: CanSerializeXml<T>(T)
  nameWithType: TypeExtensions.CanSerializeXml<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml<T>(T)
  nameWithType.vb: TypeExtensions.CanSerializeXml(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml(Of T)(T)
  name.vb: CanSerializeXml(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  name: SerializeJson<T>(T)
  nameWithType: TypeExtensions.SerializeJson<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson<T>(T)
  nameWithType.vb: TypeExtensions.SerializeJson(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson(Of T)(T)
  name.vb: SerializeJson(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  name: SerializeXml<T>(T)
  nameWithType: TypeExtensions.SerializeXml<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml<T>(T)
  nameWithType.vb: TypeExtensions.SerializeXml(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml(Of T)(T)
  name.vb: SerializeXml(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions
  commentId: N:AetherUtils.Core.Extensions
  href: AetherUtils.html
  name: AetherUtils.Core.Extensions
  nameWithType: AetherUtils.Core.Extensions
  fullName: AetherUtils.Core.Extensions
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Extensions
    name: Extensions
    href: AetherUtils.Core.Extensions.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Extensions
    name: Extensions
    href: AetherUtils.Core.Extensions.html
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.#ctor*
  commentId: Overload:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.#ctor
  href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html#AetherUtils_Core_Security_TwoFactor_TwoFactorAuth__ctor_AetherUtils_Core_Security_TwoFactor_HashType_
  name: TwoFactorAuth
  nameWithType: TwoFactorAuth.TwoFactorAuth
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.TwoFactorAuth
  nameWithType.vb: TwoFactorAuth.New
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.New
  name.vb: New
- uid: AetherUtils.Core.Security.TwoFactor.HashType
  commentId: T:AetherUtils.Core.Security.TwoFactor.HashType
  parent: AetherUtils.Core.Security.TwoFactor
  href: AetherUtils.Core.Security.TwoFactor.HashType.html
  name: HashType
  nameWithType: HashType
  fullName: AetherUtils.Core.Security.TwoFactor.HashType
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorUser
  commentId: T:AetherUtils.Core.Security.TwoFactor.TwoFactorUser
  parent: AetherUtils.Core.Security.TwoFactor
  href: AetherUtils.Core.Security.TwoFactor.TwoFactorUser.html
  name: TwoFactorUser
  nameWithType: TwoFactorUser
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorUser
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GenerateSetupInformation*
  commentId: Overload:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GenerateSetupInformation
  href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html#AetherUtils_Core_Security_TwoFactor_TwoFactorAuth_GenerateSetupInformation_AetherUtils_Core_Security_TwoFactor_TwoFactorUser__System_Byte___
  name: GenerateSetupInformation
  nameWithType: TwoFactorAuth.GenerateSetupInformation
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GenerateSetupInformation
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String,System.Boolean)
  isExternal: true
  href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html#AetherUtils_Core_Security_TwoFactor_TwoFactorAuth_GetCurrentPin_System_String_System_Boolean_
  name: GetCurrentPin(string, bool)
  nameWithType: TwoFactorAuth.GetCurrentPin(string, bool)
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(string, bool)
  nameWithType.vb: TwoFactorAuth.GetCurrentPin(String, Boolean)
  fullName.vb: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(String, Boolean)
  name.vb: GetCurrentPin(String, Boolean)
  spec.csharp:
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String,System.Boolean)
    name: GetCurrentPin
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html#AetherUtils_Core_Security_TwoFactor_TwoFactorAuth_GetCurrentPin_System_String_System_Boolean_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin(System.String,System.Boolean)
    name: GetCurrentPin
    href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html#AetherUtils_Core_Security_TwoFactor_TwoFactorAuth_GetCurrentPin_System_String_System_Boolean_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval*
  commentId: Overload:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval
  href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html#AetherUtils_Core_Security_TwoFactor_TwoFactorAuth_GeneratePinAtInterval_System_String_System_Int64_System_Int32_System_Boolean_
  name: GeneratePinAtInterval
  nameWithType: TwoFactorAuth.GeneratePinAtInterval
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GeneratePinAtInterval
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin*
  commentId: Overload:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin
  href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html#AetherUtils_Core_Security_TwoFactor_TwoFactorAuth_ValidateTwoFactorPin_System_String_System_String_System_Boolean_
  name: ValidateTwoFactorPin
  nameWithType: TwoFactorAuth.ValidateTwoFactorPin
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.ValidateTwoFactorPin
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin*
  commentId: Overload:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin
  href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html#AetherUtils_Core_Security_TwoFactor_TwoFactorAuth_GetCurrentPin_System_String_System_Boolean_
  name: GetCurrentPin
  nameWithType: TwoFactorAuth.GetCurrentPin
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPin
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins*
  commentId: Overload:AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins
  href: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.html#AetherUtils_Core_Security_TwoFactor_TwoFactorAuth_GetCurrentPins_System_String_System_Boolean_
  name: GetCurrentPins
  nameWithType: TwoFactorAuth.GetCurrentPins
  fullName: AetherUtils.Core.Security.TwoFactor.TwoFactorAuth.GetCurrentPins
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
shouldSkipMarkup: true
