### YamlMime:ManagedReference
items:
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase
  commentId: T:AetherUtils.Core.Security.Encryption.EncryptionBase
  id: EncryptionBase
  parent: AetherUtils.Core.Security.Encryption
  children:
  - AetherUtils.Core.Security.Encryption.EncryptionBase.DeriveKeyFromString(System.String,System.Int32,AetherUtils.Core.Security.Encryption.KeyLength)
  - AetherUtils.Core.Security.Encryption.EncryptionBase.FindSeparatorIndices(System.Collections.Generic.IReadOnlyList{System.Byte})
  - AetherUtils.Core.Security.Encryption.EncryptionBase.GetBytesFromUtf8String(System.String)
  - AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionFromBytes(System.Byte[]@)
  - AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionString(System.Byte[])
  - AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKey(System.Int32)
  - AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKeyPhrase(System.Int32)
  - AetherUtils.Core.Security.Encryption.EncryptionBase.GetStringFromUtf8Bytes(System.Byte[])
  - AetherUtils.Core.Security.Encryption.EncryptionBase.ReadIvFromStream(System.IO.Stream)
  - AetherUtils.Core.Security.Encryption.EncryptionBase.SHGFI_EXTENSION_SEPARATOR
  - AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(System.String,System.Byte[]@)
  - AetherUtils.Core.Security.Encryption.EncryptionBase.WriteIvToStream(System.Byte[],System.IO.Stream)
  langs:
  - csharp
  - vb
  name: EncryptionBase
  nameWithType: EncryptionBase
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase
  type: Class
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: EncryptionBase
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 10
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: >-
    Represents the base class for all encryption service classes. All encryption is performed using AES-256

    and encoded with <xref href="System.Text.Encoding.UTF8" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public class EncryptionBase
    content.vb: Public Class EncryptionBase
  inheritance:
  - System.Object
  derivedClasses:
  - AetherUtils.Core.Security.Encryption.ByteEncryptionService
  - AetherUtils.Core.Security.Encryption.FileEncryptionService
  - AetherUtils.Core.Security.Encryption.ObjectEncryptionService`1
  - AetherUtils.Core.Security.Encryption.StringEncryptionService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - AetherUtils.Core.Security.Encryption.EncryptionBase.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1
  - AetherUtils.Core.Security.Encryption.EncryptionBase.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1
  - AetherUtils.Core.Security.Encryption.EncryptionBase.AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1
  - AetherUtils.Core.Security.Encryption.EncryptionBase.AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.SHGFI_EXTENSION_SEPARATOR
  commentId: F:AetherUtils.Core.Security.Encryption.EncryptionBase.SHGFI_EXTENSION_SEPARATOR
  id: SHGFI_EXTENSION_SEPARATOR
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: SHGFI_EXTENSION_SEPARATOR
  nameWithType: EncryptionBase.SHGFI_EXTENSION_SEPARATOR
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.SHGFI_EXTENSION_SEPARATOR
  type: Field
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SHGFI_EXTENSION_SEPARATOR
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 12
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  syntax:
    content: private const char SHGFI_EXTENSION_SEPARATOR = ':'
    return:
      type: System.Char
    content.vb: Private Const SHGFI_EXTENSION_SEPARATOR As Char = ":"c
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.ReadIvFromStream(System.IO.Stream)
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.ReadIvFromStream(System.IO.Stream)
  id: ReadIvFromStream(System.IO.Stream)
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: ReadIvFromStream(Stream)
  nameWithType: EncryptionBase.ReadIvFromStream(Stream)
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.ReadIvFromStream(System.IO.Stream)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ReadIvFromStream
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 19
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: Reads the first 16 bytes from an encrypted <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref>. The first 16 bytes should be the IV.
  example: []
  syntax:
    content: internal byte[] ReadIvFromStream(Stream stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to read from.
    return:
      type: System.Byte[]
      description: ''
    content.vb: Friend Function ReadIvFromStream(stream As Stream) As Byte()
  overload: AetherUtils.Core.Security.Encryption.EncryptionBase.ReadIvFromStream*
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteIvToStream(System.Byte[],System.IO.Stream)
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.WriteIvToStream(System.Byte[],System.IO.Stream)
  id: WriteIvToStream(System.Byte[],System.IO.Stream)
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: WriteIvToStream(byte[], Stream)
  nameWithType: EncryptionBase.WriteIvToStream(byte[], Stream)
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteIvToStream(byte[], System.IO.Stream)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: WriteIvToStream
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 31
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: Writes an initialization vector to the first 16 bytes of a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: internal static void WriteIvToStream(byte[] iv, Stream stream)
    parameters:
    - id: iv
      type: System.Byte[]
      description: The IV to write.
    - id: stream
      type: System.IO.Stream
      description: The stream to write to.
    content.vb: Friend Shared Sub WriteIvToStream(iv As Byte(), stream As Stream)
  overload: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteIvToStream*
  nameWithType.vb: EncryptionBase.WriteIvToStream(Byte(), Stream)
  fullName.vb: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteIvToStream(Byte(), System.IO.Stream)
  name.vb: WriteIvToStream(Byte(), Stream)
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.DeriveKeyFromString(System.String,System.Int32,AetherUtils.Core.Security.Encryption.KeyLength)
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.DeriveKeyFromString(System.String,System.Int32,AetherUtils.Core.Security.Encryption.KeyLength)
  id: DeriveKeyFromString(System.String,System.Int32,AetherUtils.Core.Security.Encryption.KeyLength)
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: DeriveKeyFromString(string, int, KeyLength)
  nameWithType: EncryptionBase.DeriveKeyFromString(string, int, KeyLength)
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.DeriveKeyFromString(string, int, AetherUtils.Core.Security.Encryption.KeyLength)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: DeriveKeyFromString
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 42
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: >-
    Derives a key to use for encryption/decryption from an input string.

    <p>This method should be called with the same arguments when encrypting and decrypting. Failure to do so will

    result in a failed decryption based on different keys.</p>
  example: []
  syntax:
    content: internal static byte[] DeriveKeyFromString(string input, int iterations = 5000, KeyLength keyLength = KeyLength.Bits256)
    parameters:
    - id: input
      type: System.String
      description: A plain-text string to derive key from.
    - id: iterations
      type: System.Int32
      description: The number of iterations. (Default is 5000).
    - id: keyLength
      type: AetherUtils.Core.Security.Encryption.KeyLength
      description: The length of the generated key, in bytes.
    return:
      type: System.Byte[]
      description: A cryptographically strong key.
    content.vb: Friend Shared Function DeriveKeyFromString(input As String, iterations As Integer = 5000, keyLength As KeyLength = KeyLength.Bits256) As Byte()
  overload: AetherUtils.Core.Security.Encryption.EncryptionBase.DeriveKeyFromString*
  nameWithType.vb: EncryptionBase.DeriveKeyFromString(String, Integer, KeyLength)
  fullName.vb: AetherUtils.Core.Security.Encryption.EncryptionBase.DeriveKeyFromString(String, Integer, AetherUtils.Core.Security.Encryption.KeyLength)
  name.vb: DeriveKeyFromString(String, Integer, KeyLength)
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKey(System.Int32)
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKey(System.Int32)
  id: GetRandomKey(System.Int32)
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: GetRandomKey(int)
  nameWithType: EncryptionBase.GetRandomKey(int)
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKey(int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetRandomKey
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 56
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: Get a cryptographically strong random key that can be used for encryption.
  example: []
  syntax:
    content: private static byte[] GetRandomKey(int keySize = 32)
    parameters:
    - id: keySize
      type: System.Int32
      description: The size, in bytes, for the generated key.
    return:
      type: System.Byte[]
      description: A cryptographically strong and random <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array.
    content.vb: Private Shared Function GetRandomKey(keySize As Integer = 32) As Byte()
  overload: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKey*
  nameWithType.vb: EncryptionBase.GetRandomKey(Integer)
  fullName.vb: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKey(Integer)
  name.vb: GetRandomKey(Integer)
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKeyPhrase(System.Int32)
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKeyPhrase(System.Int32)
  id: GetRandomKeyPhrase(System.Int32)
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: GetRandomKeyPhrase(int)
  nameWithType: EncryptionBase.GetRandomKeyPhrase(int)
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKeyPhrase(int)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetRandomKeyPhrase
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 68
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: Get a cryptographically strong random key phrase that can be used for encryption.
  example: []
  syntax:
    content: public static string GetRandomKeyPhrase(int keySize = 32)
    parameters:
    - id: keySize
      type: System.Int32
      description: The size, in bytes, for the generated key.
    return:
      type: System.String
      description: A cryptographically strong and random <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function GetRandomKeyPhrase(keySize As Integer = 32) As String
  overload: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKeyPhrase*
  nameWithType.vb: EncryptionBase.GetRandomKeyPhrase(Integer)
  fullName.vb: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKeyPhrase(Integer)
  name.vb: GetRandomKeyPhrase(Integer)
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(System.String,System.Byte[]@)
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(System.String,System.Byte[]@)
  id: WriteExtensionToBytes(System.String,System.Byte[]@)
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: WriteExtensionToBytes(string, ref byte[])
  nameWithType: EncryptionBase.WriteExtensionToBytes(string, ref byte[])
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(string, ref byte[])
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: WriteExtensionToBytes
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 82
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: >-
    Write the <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> representation of the <code class="paramref">extension</code> to the supplied buffer.

    <p>This method writes the extension bytes at the end of the original <code class="paramref">buffer</code>.</p>
  example: []
  syntax:
    content: internal static void WriteExtensionToBytes(string extension, ref byte[] buffer)
    parameters:
    - id: extension
      type: System.String
      description: The file extension to write, including the <code>period (.)</code>.
    - id: buffer
      type: System.Byte[]
      description: The buffer of bytes to write to, passed by reference.
    content.vb: Friend Shared Sub WriteExtensionToBytes(extension As String, buffer As Byte())
  overload: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If <code class="paramref">extension</code> was <code>null</code> or empty.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code class="paramref">buffer</code> was <code>null</code>.
  nameWithType.vb: EncryptionBase.WriteExtensionToBytes(String, Byte())
  fullName.vb: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(String, Byte())
  name.vb: WriteExtensionToBytes(String, Byte())
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionFromBytes(System.Byte[]@)
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionFromBytes(System.Byte[]@)
  id: GetExtensionFromBytes(System.Byte[]@)
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: GetExtensionFromBytes(ref byte[])
  nameWithType: EncryptionBase.GetExtensionFromBytes(ref byte[])
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionFromBytes(ref byte[])
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetExtensionFromBytes
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 104
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: >-
    Get the original extension string from a <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> buffer

    that was written to with <xref href="AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(System.String%2cSystem.Byte%5b%5d%40)" data-throw-if-not-resolved="false"></xref>. This method modifies the buffer and removes

    the extension bytes from it.
  example: []
  syntax:
    content: internal static string GetExtensionFromBytes(ref byte[] buffer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer of bytes to read the extension from, passed by reference.
    return:
      type: System.String
      description: ''
    content.vb: Friend Shared Function GetExtensionFromBytes(buffer As Byte()) As String
  overload: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionFromBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code class="paramref">buffer</code> was <code>null</code>.
  nameWithType.vb: EncryptionBase.GetExtensionFromBytes(Byte())
  fullName.vb: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionFromBytes(Byte())
  name.vb: GetExtensionFromBytes(Byte())
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.FindSeparatorIndices(System.Collections.Generic.IReadOnlyList{System.Byte})
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.FindSeparatorIndices(System.Collections.Generic.IReadOnlyList{System.Byte})
  id: FindSeparatorIndices(System.Collections.Generic.IReadOnlyList{System.Byte})
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: FindSeparatorIndices(IReadOnlyList<byte>)
  nameWithType: EncryptionBase.FindSeparatorIndices(IReadOnlyList<byte>)
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.FindSeparatorIndices(System.Collections.Generic.IReadOnlyList<byte>)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: FindSeparatorIndices
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 131
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: Find the first and last indices of the separator character in the specified <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array.
  example: []
  syntax:
    content: private static ReadOnlyPair<int, int> FindSeparatorIndices(IReadOnlyList<byte> buffer)
    parameters:
    - id: buffer
      type: System.Collections.Generic.IReadOnlyList{System.Byte}
      description: The <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array to search.
    return:
      type: AetherUtils.Core.Structs.ReadOnlyPair{System.Int32,System.Int32}
      description: >-
        A <xref href="AetherUtils.Core.Structs.ReadOnlyPair%602" data-throw-if-not-resolved="false"></xref> where the <code>key</code> is the first index
            and the <code>value</code> is the last index.
    content.vb: Private Shared Function FindSeparatorIndices(buffer As IReadOnlyList(Of Byte)) As ReadOnlyPair(Of Integer, Integer)
  overload: AetherUtils.Core.Security.Encryption.EncryptionBase.FindSeparatorIndices*
  nameWithType.vb: EncryptionBase.FindSeparatorIndices(IReadOnlyList(Of Byte))
  fullName.vb: AetherUtils.Core.Security.Encryption.EncryptionBase.FindSeparatorIndices(System.Collections.Generic.IReadOnlyList(Of Byte))
  name.vb: FindSeparatorIndices(IReadOnlyList(Of Byte))
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionString(System.Byte[])
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionString(System.Byte[])
  id: GetExtensionString(System.Byte[])
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: GetExtensionString(byte[])
  nameWithType: EncryptionBase.GetExtensionString(byte[])
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionString(byte[])
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetExtensionString
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 164
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: Get the extension string from the <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array.
  example: []
  syntax:
    content: private static string GetExtensionString(byte[] buffer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of bytes representing an extension.
    return:
      type: System.String
      description: A string representation of the extension.
    content.vb: Private Shared Function GetExtensionString(buffer As Byte()) As String
  overload: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionString*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: >-
      If the extension could not be read from the supplied
          <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array.
  nameWithType.vb: EncryptionBase.GetExtensionString(Byte())
  fullName.vb: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionString(Byte())
  name.vb: GetExtensionString(Byte())
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetStringFromUtf8Bytes(System.Byte[])
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.GetStringFromUtf8Bytes(System.Byte[])
  id: GetStringFromUtf8Bytes(System.Byte[])
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: GetStringFromUtf8Bytes(byte[])
  nameWithType: EncryptionBase.GetStringFromUtf8Bytes(byte[])
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetStringFromUtf8Bytes(byte[])
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetStringFromUtf8Bytes
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 187
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: Get a <xref href="System.String" data-throw-if-not-resolved="false"></xref> equalvalent to the <code class="paramref">input</code> in <xref href="System.Text.Encoding.UTF8" data-throw-if-not-resolved="false"></xref> encoding.
  example: []
  syntax:
    content: internal static string GetStringFromUtf8Bytes(byte[] input)
    parameters:
    - id: input
      type: System.Byte[]
      description: ''
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> representing the <code class="paramref">input</code> in <xref href="System.Text.Encoding.UTF8" data-throw-if-not-resolved="false"></xref>.
    content.vb: Friend Shared Function GetStringFromUtf8Bytes(input As Byte()) As String
  overload: AetherUtils.Core.Security.Encryption.EncryptionBase.GetStringFromUtf8Bytes*
  nameWithType.vb: EncryptionBase.GetStringFromUtf8Bytes(Byte())
  fullName.vb: AetherUtils.Core.Security.Encryption.EncryptionBase.GetStringFromUtf8Bytes(Byte())
  name.vb: GetStringFromUtf8Bytes(Byte())
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetBytesFromUtf8String(System.String)
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.GetBytesFromUtf8String(System.String)
  id: GetBytesFromUtf8String(System.String)
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  langs:
  - csharp
  - vb
  name: GetBytesFromUtf8String(string)
  nameWithType: EncryptionBase.GetBytesFromUtf8String(string)
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetBytesFromUtf8String(string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Security/Encryption/EncryptionBase.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetBytesFromUtf8String
    path: ../AetherUtils.Core/Security/Encryption/EncryptionBase.cs
    startLine: 194
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Security.Encryption
  summary: Get a <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array equivalent to the <code class="paramref">input</code> in <xref href="System.Text.Encoding.UTF8" data-throw-if-not-resolved="false"></xref> encoding.
  example: []
  syntax:
    content: internal static byte[] GetBytesFromUtf8String(string input)
    parameters:
    - id: input
      type: System.String
      description: ''
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array representing the <code class="paramref">input</code> in <xref href="System.Text.Encoding.UTF8" data-throw-if-not-resolved="false"></xref> encoding.
    content.vb: Friend Shared Function GetBytesFromUtf8String(input As String) As Byte()
  overload: AetherUtils.Core.Security.Encryption.EncryptionBase.GetBytesFromUtf8String*
  nameWithType.vb: EncryptionBase.GetBytesFromUtf8String(String)
  fullName.vb: AetherUtils.Core.Security.Encryption.EncryptionBase.GetBytesFromUtf8String(String)
  name.vb: GetBytesFromUtf8String(String)
references:
- uid: System.Text.Encoding.UTF8
  commentId: P:System.Text.Encoding.UTF8
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.encoding.utf8
  name: UTF8
  nameWithType: Encoding.UTF8
  fullName: System.Text.Encoding.UTF8
- uid: AetherUtils.Core.Security.Encryption
  commentId: N:AetherUtils.Core.Security.Encryption
  href: AetherUtils.html
  name: AetherUtils.Core.Security.Encryption
  nameWithType: AetherUtils.Core.Security.Encryption
  fullName: AetherUtils.Core.Security.Encryption
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Security
    name: Security
    href: AetherUtils.Core.Security.html
  - name: .
  - uid: AetherUtils.Core.Security.Encryption
    name: Encryption
    href: AetherUtils.Core.Security.Encryption.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Security
    name: Security
    href: AetherUtils.Core.Security.html
  - name: .
  - uid: AetherUtils.Core.Security.Encryption
    name: Encryption
    href: AetherUtils.Core.Security.Encryption.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  name: CanSerializeJson<EncryptionBase>(EncryptionBase)
  nameWithType: TypeExtensions.CanSerializeJson<EncryptionBase>(EncryptionBase)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson<AetherUtils.Core.Security.Encryption.EncryptionBase>(AetherUtils.Core.Security.Encryption.EncryptionBase)
  nameWithType.vb: TypeExtensions.CanSerializeJson(Of EncryptionBase)(EncryptionBase)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson(Of AetherUtils.Core.Security.Encryption.EncryptionBase)(AetherUtils.Core.Security.Encryption.EncryptionBase)
  name.vb: CanSerializeJson(Of EncryptionBase)(EncryptionBase)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(AetherUtils.Core.Security.Encryption.EncryptionBase)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(AetherUtils.Core.Security.Encryption.EncryptionBase)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  name: CanSerializeXml<EncryptionBase>(EncryptionBase)
  nameWithType: TypeExtensions.CanSerializeXml<EncryptionBase>(EncryptionBase)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml<AetherUtils.Core.Security.Encryption.EncryptionBase>(AetherUtils.Core.Security.Encryption.EncryptionBase)
  nameWithType.vb: TypeExtensions.CanSerializeXml(Of EncryptionBase)(EncryptionBase)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml(Of AetherUtils.Core.Security.Encryption.EncryptionBase)(AetherUtils.Core.Security.Encryption.EncryptionBase)
  name.vb: CanSerializeXml(Of EncryptionBase)(EncryptionBase)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(AetherUtils.Core.Security.Encryption.EncryptionBase)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(AetherUtils.Core.Security.Encryption.EncryptionBase)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  name: SerializeJson<EncryptionBase>(EncryptionBase)
  nameWithType: TypeExtensions.SerializeJson<EncryptionBase>(EncryptionBase)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson<AetherUtils.Core.Security.Encryption.EncryptionBase>(AetherUtils.Core.Security.Encryption.EncryptionBase)
  nameWithType.vb: TypeExtensions.SerializeJson(Of EncryptionBase)(EncryptionBase)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson(Of AetherUtils.Core.Security.Encryption.EncryptionBase)(AetherUtils.Core.Security.Encryption.EncryptionBase)
  name.vb: SerializeJson(Of EncryptionBase)(EncryptionBase)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(AetherUtils.Core.Security.Encryption.EncryptionBase)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(AetherUtils.Core.Security.Encryption.EncryptionBase)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  parent: AetherUtils.Core.Extensions.TypeExtensions
  definition: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  name: SerializeXml<EncryptionBase>(EncryptionBase)
  nameWithType: TypeExtensions.SerializeXml<EncryptionBase>(EncryptionBase)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml<AetherUtils.Core.Security.Encryption.EncryptionBase>(AetherUtils.Core.Security.Encryption.EncryptionBase)
  nameWithType.vb: TypeExtensions.SerializeXml(Of EncryptionBase)(EncryptionBase)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml(Of AetherUtils.Core.Security.Encryption.EncryptionBase)(AetherUtils.Core.Security.Encryption.EncryptionBase)
  name.vb: SerializeXml(Of EncryptionBase)(EncryptionBase)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(AetherUtils.Core.Security.Encryption.EncryptionBase)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: <
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: '>'
  - name: (
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(AetherUtils.Core.Security.Encryption.EncryptionBase)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
  - name: (
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase
    name: EncryptionBase
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  name: CanSerializeJson<T>(T)
  nameWithType: TypeExtensions.CanSerializeJson<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson<T>(T)
  nameWithType.vb: TypeExtensions.CanSerializeJson(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson(Of T)(T)
  name.vb: CanSerializeJson(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
    name: CanSerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions
  commentId: T:AetherUtils.Core.Extensions.TypeExtensions
  parent: AetherUtils.Core.Extensions
  href: AetherUtils.Core.Extensions.TypeExtensions.html
  name: TypeExtensions
  nameWithType: TypeExtensions
  fullName: AetherUtils.Core.Extensions.TypeExtensions
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  name: CanSerializeXml<T>(T)
  nameWithType: TypeExtensions.CanSerializeXml<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml<T>(T)
  nameWithType.vb: TypeExtensions.CanSerializeXml(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml(Of T)(T)
  name.vb: CanSerializeXml(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
    name: CanSerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  name: SerializeJson<T>(T)
  nameWithType: TypeExtensions.SerializeJson<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson<T>(T)
  nameWithType.vb: TypeExtensions.SerializeJson(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson(Of T)(T)
  name.vb: SerializeJson(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
    name: SerializeJson
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  name: SerializeXml<T>(T)
  nameWithType: TypeExtensions.SerializeXml<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml<T>(T)
  nameWithType.vb: TypeExtensions.SerializeXml(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml(Of T)(T)
  name.vb: SerializeXml(Of T)(T)
  spec.csharp:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
    name: SerializeXml
    href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: AetherUtils.Core.Extensions
  commentId: N:AetherUtils.Core.Extensions
  href: AetherUtils.html
  name: AetherUtils.Core.Extensions
  nameWithType: AetherUtils.Core.Extensions
  fullName: AetherUtils.Core.Extensions
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Extensions
    name: Extensions
    href: AetherUtils.Core.Extensions.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Extensions
    name: Extensions
    href: AetherUtils.Core.Extensions.html
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.char
  name: char
  nameWithType: char
  fullName: char
  nameWithType.vb: Char
  fullName.vb: Char
  name.vb: Char
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.ReadIvFromStream*
  commentId: Overload:AetherUtils.Core.Security.Encryption.EncryptionBase.ReadIvFromStream
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_ReadIvFromStream_System_IO_Stream_
  name: ReadIvFromStream
  nameWithType: EncryptionBase.ReadIvFromStream
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.ReadIvFromStream
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteIvToStream*
  commentId: Overload:AetherUtils.Core.Security.Encryption.EncryptionBase.WriteIvToStream
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_WriteIvToStream_System_Byte___System_IO_Stream_
  name: WriteIvToStream
  nameWithType: EncryptionBase.WriteIvToStream
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteIvToStream
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.DeriveKeyFromString*
  commentId: Overload:AetherUtils.Core.Security.Encryption.EncryptionBase.DeriveKeyFromString
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_DeriveKeyFromString_System_String_System_Int32_AetherUtils_Core_Security_Encryption_KeyLength_
  name: DeriveKeyFromString
  nameWithType: EncryptionBase.DeriveKeyFromString
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.DeriveKeyFromString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: AetherUtils.Core.Security.Encryption.KeyLength
  commentId: T:AetherUtils.Core.Security.Encryption.KeyLength
  parent: AetherUtils.Core.Security.Encryption
  href: AetherUtils.Core.Security.Encryption.KeyLength.html
  name: KeyLength
  nameWithType: KeyLength
  fullName: AetherUtils.Core.Security.Encryption.KeyLength
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKey*
  commentId: Overload:AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKey
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_GetRandomKey_System_Int32_
  name: GetRandomKey
  nameWithType: EncryptionBase.GetRandomKey
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKey
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKeyPhrase*
  commentId: Overload:AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKeyPhrase
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_GetRandomKeyPhrase_System_Int32_
  name: GetRandomKeyPhrase
  nameWithType: EncryptionBase.GetRandomKeyPhrase
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetRandomKeyPhrase
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes*
  commentId: Overload:AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_WriteExtensionToBytes_System_String_System_Byte____
  name: WriteExtensionToBytes
  nameWithType: EncryptionBase.WriteExtensionToBytes
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(System.String,System.Byte[]@)
  commentId: M:AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(System.String,System.Byte[]@)
  parent: AetherUtils.Core.Security.Encryption.EncryptionBase
  isExternal: true
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_WriteExtensionToBytes_System_String_System_Byte____
  name: WriteExtensionToBytes(string, ref byte[])
  nameWithType: EncryptionBase.WriteExtensionToBytes(string, ref byte[])
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(string, ref byte[])
  nameWithType.vb: EncryptionBase.WriteExtensionToBytes(String, Byte())
  fullName.vb: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(String, Byte())
  name.vb: WriteExtensionToBytes(String, Byte())
  spec.csharp:
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(System.String,System.Byte[]@)
    name: WriteExtensionToBytes
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_WriteExtensionToBytes_System_String_System_Byte____
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: ref
  - name: " "
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: AetherUtils.Core.Security.Encryption.EncryptionBase.WriteExtensionToBytes(System.String,System.Byte[]@)
    name: WriteExtensionToBytes
    href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_WriteExtensionToBytes_System_String_System_Byte____
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionFromBytes*
  commentId: Overload:AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionFromBytes
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_GetExtensionFromBytes_System_Byte____
  name: GetExtensionFromBytes
  nameWithType: EncryptionBase.GetExtensionFromBytes
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionFromBytes
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase
  commentId: T:AetherUtils.Core.Security.Encryption.EncryptionBase
  parent: AetherUtils.Core.Security.Encryption
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html
  name: EncryptionBase
  nameWithType: EncryptionBase
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase
- uid: AetherUtils.Core.Structs.ReadOnlyPair`2
  commentId: T:AetherUtils.Core.Structs.ReadOnlyPair`2
  href: AetherUtils.Core.Structs.ReadOnlyPair-2.html
  name: ReadOnlyPair<K, V>
  nameWithType: ReadOnlyPair<K, V>
  fullName: AetherUtils.Core.Structs.ReadOnlyPair<K, V>
  nameWithType.vb: ReadOnlyPair(Of K, V)
  fullName.vb: AetherUtils.Core.Structs.ReadOnlyPair(Of K, V)
  name.vb: ReadOnlyPair(Of K, V)
  spec.csharp:
  - uid: AetherUtils.Core.Structs.ReadOnlyPair`2
    name: ReadOnlyPair
    href: AetherUtils.Core.Structs.ReadOnlyPair-2.html
  - name: <
  - name: K
  - name: ','
  - name: " "
  - name: V
  - name: '>'
  spec.vb:
  - uid: AetherUtils.Core.Structs.ReadOnlyPair`2
    name: ReadOnlyPair
    href: AetherUtils.Core.Structs.ReadOnlyPair-2.html
  - name: (
  - name: Of
  - name: " "
  - name: K
  - name: ','
  - name: " "
  - name: V
  - name: )
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.FindSeparatorIndices*
  commentId: Overload:AetherUtils.Core.Security.Encryption.EncryptionBase.FindSeparatorIndices
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_FindSeparatorIndices_System_Collections_Generic_IReadOnlyList_System_Byte__
  name: FindSeparatorIndices
  nameWithType: EncryptionBase.FindSeparatorIndices
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.FindSeparatorIndices
- uid: System.Collections.Generic.IReadOnlyList{System.Byte}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.Byte}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<byte>
  nameWithType: IReadOnlyList<byte>
  fullName: System.Collections.Generic.IReadOnlyList<byte>
  nameWithType.vb: IReadOnlyList(Of Byte)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Byte)
  name.vb: IReadOnlyList(Of Byte)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: AetherUtils.Core.Structs.ReadOnlyPair{System.Int32,System.Int32}
  commentId: T:AetherUtils.Core.Structs.ReadOnlyPair{System.Int32,System.Int32}
  parent: AetherUtils.Core.Structs
  definition: AetherUtils.Core.Structs.ReadOnlyPair`2
  href: AetherUtils.Core.Structs.ReadOnlyPair-2.html
  name: ReadOnlyPair<int, int>
  nameWithType: ReadOnlyPair<int, int>
  fullName: AetherUtils.Core.Structs.ReadOnlyPair<int, int>
  nameWithType.vb: ReadOnlyPair(Of Integer, Integer)
  fullName.vb: AetherUtils.Core.Structs.ReadOnlyPair(Of Integer, Integer)
  name.vb: ReadOnlyPair(Of Integer, Integer)
  spec.csharp:
  - uid: AetherUtils.Core.Structs.ReadOnlyPair`2
    name: ReadOnlyPair
    href: AetherUtils.Core.Structs.ReadOnlyPair-2.html
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: AetherUtils.Core.Structs.ReadOnlyPair`2
    name: ReadOnlyPair
    href: AetherUtils.Core.Structs.ReadOnlyPair-2.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: AetherUtils.Core.Structs
  commentId: N:AetherUtils.Core.Structs
  href: AetherUtils.html
  name: AetherUtils.Core.Structs
  nameWithType: AetherUtils.Core.Structs
  fullName: AetherUtils.Core.Structs
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Structs
    name: Structs
    href: AetherUtils.Core.Structs.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Structs
    name: Structs
    href: AetherUtils.Core.Structs.html
- uid: System.NullReferenceException
  commentId: T:System.NullReferenceException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullreferenceexception
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionString*
  commentId: Overload:AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionString
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_GetExtensionString_System_Byte___
  name: GetExtensionString
  nameWithType: EncryptionBase.GetExtensionString
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetExtensionString
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetStringFromUtf8Bytes*
  commentId: Overload:AetherUtils.Core.Security.Encryption.EncryptionBase.GetStringFromUtf8Bytes
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_GetStringFromUtf8Bytes_System_Byte___
  name: GetStringFromUtf8Bytes
  nameWithType: EncryptionBase.GetStringFromUtf8Bytes
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetStringFromUtf8Bytes
- uid: AetherUtils.Core.Security.Encryption.EncryptionBase.GetBytesFromUtf8String*
  commentId: Overload:AetherUtils.Core.Security.Encryption.EncryptionBase.GetBytesFromUtf8String
  href: AetherUtils.Core.Security.Encryption.EncryptionBase.html#AetherUtils_Core_Security_Encryption_EncryptionBase_GetBytesFromUtf8String_System_String_
  name: GetBytesFromUtf8String
  nameWithType: EncryptionBase.GetBytesFromUtf8String
  fullName: AetherUtils.Core.Security.Encryption.EncryptionBase.GetBytesFromUtf8String
shouldSkipMarkup: true
