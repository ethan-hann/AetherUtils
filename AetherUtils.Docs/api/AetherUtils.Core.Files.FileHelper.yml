### YamlMime:ManagedReference
items:
- uid: AetherUtils.Core.Files.FileHelper
  commentId: T:AetherUtils.Core.Files.FileHelper
  id: FileHelper
  parent: AetherUtils.Core.Files
  children:
  - AetherUtils.Core.Files.FileHelper.CreateDirectories(System.String,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.DeleteFile(System.String,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.DoesFileExist(System.String,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.DoesFolderExist(System.String,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.ExpandPath(System.String)
  - AetherUtils.Core.Files.FileHelper.GetExtension(System.String,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.IsValidPath(System.String)
  - AetherUtils.Core.Files.FileHelper.OpenFile(System.String,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.OpenFileAsync(System.String,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.OpenNonTextFile(System.String,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.OpenNonTextFileAsync(System.String,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.RemoveInvalidFileNameChars(System.String)
  - AetherUtils.Core.Files.FileHelper.RemoveInvalidPathChars(System.String)
  - AetherUtils.Core.Files.FileHelper.SaveFile(System.String,System.Byte[],System.Boolean)
  - AetherUtils.Core.Files.FileHelper.SaveFile(System.String,System.String,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.SaveFile(System.String,System.String,System.Text.Encoding,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.SaveFileAsync(System.String,System.Byte[],System.Boolean)
  - AetherUtils.Core.Files.FileHelper.SaveFileAsync(System.String,System.String,System.Boolean)
  - AetherUtils.Core.Files.FileHelper.SaveFileAsync(System.String,System.String,System.Text.Encoding,System.Boolean)
  langs:
  - csharp
  - vb
  name: FileHelper
  nameWithType: FileHelper
  fullName: AetherUtils.Core.Files.FileHelper
  type: Class
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: FileHelper
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 8
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Provides methods to manipulate files and folders on the Windows file system.
  example: []
  syntax:
    content: public static class FileHelper
    content.vb: Public Module FileHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: AetherUtils.Core.Files.FileHelper.CreateDirectories(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.CreateDirectories(System.String,System.Boolean)
  id: CreateDirectories(System.String,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: CreateDirectories(string, bool)
  nameWithType: FileHelper.CreateDirectories(string, bool)
  fullName: AetherUtils.Core.Files.FileHelper.CreateDirectories(string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: CreateDirectories
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 17
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Create directories along the specified file path if they don't already exist.
  example: []
  syntax:
    content: public static void CreateDirectories(string filePath, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path to create directories on.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before creating directories?
    content.vb: Public Shared Sub CreateDirectories(filePath As String, expandPath As Boolean = True)
  overload: AetherUtils.Core.Files.FileHelper.CreateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.CreateDirectories(String, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.CreateDirectories(String, Boolean)
  name.vb: CreateDirectories(String, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.SaveFile(System.String,System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.SaveFile(System.String,System.String,System.Boolean)
  id: SaveFile(System.String,System.String,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: SaveFile(string, string, bool)
  nameWithType: FileHelper.SaveFile(string, string, bool)
  fullName: AetherUtils.Core.Files.FileHelper.SaveFile(string, string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SaveFile
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 35
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: >-
    Create a new file and write the specified content to it.

    <p>If the file already exists, it is overwritten.</p>
  example: []
  syntax:
    content: public static void SaveFile(string filePath, string content, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path to the file.
    - id: content
      type: System.String
      description: The text to save to the file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before creating file?
    content.vb: Public Shared Sub SaveFile(filePath As String, content As String, expandPath As Boolean = True)
  overload: AetherUtils.Core.Files.FileHelper.SaveFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.SaveFile(String, String, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.SaveFile(String, String, Boolean)
  name.vb: SaveFile(String, String, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.OpenFile(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.OpenFile(System.String,System.Boolean)
  id: OpenFile(System.String,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: OpenFile(string, bool)
  nameWithType: FileHelper.OpenFile(string, bool)
  fullName: AetherUtils.Core.Files.FileHelper.OpenFile(string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: OpenFile
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 51
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Open a text file, read all text within to a string, and close the file.
  example: []
  syntax:
    content: public static string OpenFile(string filePath, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path to the file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before attempting to open the file?
    return:
      type: System.String
      description: The contents of <code class="paramref">filePath</code> or <xref href="System.String.Empty" data-throw-if-not-resolved="false"></xref> if the file could not be opened.
    content.vb: Public Shared Function OpenFile(filePath As String, expandPath As Boolean = True) As String
  overload: AetherUtils.Core.Files.FileHelper.OpenFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.OpenFile(String, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.OpenFile(String, Boolean)
  name.vb: OpenFile(String, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.OpenFileAsync(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.OpenFileAsync(System.String,System.Boolean)
  id: OpenFileAsync(System.String,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: OpenFileAsync(string, bool)
  nameWithType: FileHelper.OpenFileAsync(string, bool)
  fullName: AetherUtils.Core.Files.FileHelper.OpenFileAsync(string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: OpenFileAsync
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 66
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Open a text file, read all text within asynchronously to a string, and close the file.
  example: []
  syntax:
    content: public static Task<string> OpenFileAsync(string filePath, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path to the file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before attempting to open the file?
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> which contains the <xref href="System.String" data-throw-if-not-resolved="false"></xref> contents upon completion.
    content.vb: Public Shared Function OpenFileAsync(filePath As String, expandPath As Boolean = True) As Task(Of String)
  overload: AetherUtils.Core.Files.FileHelper.OpenFileAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.OpenFileAsync(String, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.OpenFileAsync(String, Boolean)
  name.vb: OpenFileAsync(String, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.OpenNonTextFile(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.OpenNonTextFile(System.String,System.Boolean)
  id: OpenNonTextFile(System.String,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: OpenNonTextFile(string, bool)
  nameWithType: FileHelper.OpenNonTextFile(string, bool)
  fullName: AetherUtils.Core.Files.FileHelper.OpenNonTextFile(string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: OpenNonTextFile
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 81
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Open a binary file, read all bytes within to a <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array, and close the file.
  example: []
  syntax:
    content: public static byte[] OpenNonTextFile(string filePath, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path to the file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before attempting to open the file?
    return:
      type: System.Byte[]
      description: The contents of <code class="paramref">filePath</code> as a <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array.
    content.vb: Public Shared Function OpenNonTextFile(filePath As String, expandPath As Boolean = True) As Byte()
  overload: AetherUtils.Core.Files.FileHelper.OpenNonTextFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.OpenNonTextFile(String, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.OpenNonTextFile(String, Boolean)
  name.vb: OpenNonTextFile(String, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.OpenNonTextFileAsync(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.OpenNonTextFileAsync(System.String,System.Boolean)
  id: OpenNonTextFileAsync(System.String,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: OpenNonTextFileAsync(string, bool)
  nameWithType: FileHelper.OpenNonTextFileAsync(string, bool)
  fullName: AetherUtils.Core.Files.FileHelper.OpenNonTextFileAsync(string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: OpenNonTextFileAsync
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 96
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Open a binary file asynchronously, read all bytes within to a <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array, and close the file.
  example: []
  syntax:
    content: public static Task<byte[]> OpenNonTextFileAsync(string filePath, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path to the file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before attempting to open the file?
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> which contains the <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array upon completion.
    content.vb: Public Shared Function OpenNonTextFileAsync(filePath As String, expandPath As Boolean = True) As Task(Of Byte())
  overload: AetherUtils.Core.Files.FileHelper.OpenNonTextFileAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.OpenNonTextFileAsync(String, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.OpenNonTextFileAsync(String, Boolean)
  name.vb: OpenNonTextFileAsync(String, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.SaveFile(System.String,System.String,System.Text.Encoding,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.SaveFile(System.String,System.String,System.Text.Encoding,System.Boolean)
  id: SaveFile(System.String,System.String,System.Text.Encoding,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: SaveFile(string, string, Encoding, bool)
  nameWithType: FileHelper.SaveFile(string, string, Encoding, bool)
  fullName: AetherUtils.Core.Files.FileHelper.SaveFile(string, string, System.Text.Encoding, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SaveFile
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 113
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: >-
    Create a new file and write the specified content to it, using the specified encoding. 

    If the file exists, it is overwritten.
  example: []
  syntax:
    content: public static void SaveFile(string filePath, string content, Encoding encoding, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path of the file to save.
    - id: content
      type: System.String
      description: The text to save to the file.
    - id: encoding
      type: System.Text.Encoding
      description: The <xref href="System.Text.Encoding" data-throw-if-not-resolved="false"></xref> to use when saving the file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before creating file?
    content.vb: Public Shared Sub SaveFile(filePath As String, content As String, encoding As Encoding, expandPath As Boolean = True)
  overload: AetherUtils.Core.Files.FileHelper.SaveFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.SaveFile(String, String, Encoding, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.SaveFile(String, String, System.Text.Encoding, Boolean)
  name.vb: SaveFile(String, String, Encoding, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.SaveFile(System.String,System.Byte[],System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.SaveFile(System.String,System.Byte[],System.Boolean)
  id: SaveFile(System.String,System.Byte[],System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: SaveFile(string, byte[], bool)
  nameWithType: FileHelper.SaveFile(string, byte[], bool)
  fullName: AetherUtils.Core.Files.FileHelper.SaveFile(string, byte[], bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SaveFile
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 130
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: >-
    Create a new file and write the specified <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array to it.

    If the file exists, it is overwritten.
  example: []
  syntax:
    content: public static void SaveFile(string filePath, byte[] contents, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path of the file to save.
    - id: contents
      type: System.Byte[]
      description: The <xref href="System.Byte" data-throw-if-not-resolved="false"></xref>s to save to the file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before creating file?
    content.vb: Public Shared Sub SaveFile(filePath As String, contents As Byte(), expandPath As Boolean = True)
  overload: AetherUtils.Core.Files.FileHelper.SaveFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.SaveFile(String, Byte(), Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.SaveFile(String, Byte(), Boolean)
  name.vb: SaveFile(String, Byte(), Boolean)
- uid: AetherUtils.Core.Files.FileHelper.SaveFileAsync(System.String,System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.SaveFileAsync(System.String,System.String,System.Boolean)
  id: SaveFileAsync(System.String,System.String,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: SaveFileAsync(string, string, bool)
  nameWithType: FileHelper.SaveFileAsync(string, string, bool)
  fullName: AetherUtils.Core.Files.FileHelper.SaveFileAsync(string, string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SaveFileAsync
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 147
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: >-
    Asynchronously create a new file and write the specified content to it.

    <p>If the file exists, it is overwritten.</p>
  example: []
  syntax:
    content: public static void SaveFileAsync(string filePath, string content, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path of the file to save.
    - id: content
      type: System.String
      description: The text to save to the file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before creating file?
    content.vb: Public Shared Sub SaveFileAsync(filePath As String, content As String, expandPath As Boolean = True)
  overload: AetherUtils.Core.Files.FileHelper.SaveFileAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.SaveFileAsync(String, String, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.SaveFileAsync(String, String, Boolean)
  name.vb: SaveFileAsync(String, String, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.SaveFileAsync(System.String,System.String,System.Text.Encoding,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.SaveFileAsync(System.String,System.String,System.Text.Encoding,System.Boolean)
  id: SaveFileAsync(System.String,System.String,System.Text.Encoding,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: SaveFileAsync(string, string, Encoding, bool)
  nameWithType: FileHelper.SaveFileAsync(string, string, Encoding, bool)
  fullName: AetherUtils.Core.Files.FileHelper.SaveFileAsync(string, string, System.Text.Encoding, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SaveFileAsync
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 165
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: >-
    Asynchronously create a new file and write the specified content to it, using the specified encoding.

    If the file exists, it is overwritten.
  example: []
  syntax:
    content: public static void SaveFileAsync(string filePath, string content, Encoding encoding, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path of the file to save.
    - id: content
      type: System.String
      description: The text to save to the file.
    - id: encoding
      type: System.Text.Encoding
      description: The <xref href="System.Text.Encoding" data-throw-if-not-resolved="false"></xref> to use when saving the file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before creating file?
    content.vb: Public Shared Sub SaveFileAsync(filePath As String, content As String, encoding As Encoding, expandPath As Boolean = True)
  overload: AetherUtils.Core.Files.FileHelper.SaveFileAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.SaveFileAsync(String, String, Encoding, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.SaveFileAsync(String, String, System.Text.Encoding, Boolean)
  name.vb: SaveFileAsync(String, String, Encoding, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.SaveFileAsync(System.String,System.Byte[],System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.SaveFileAsync(System.String,System.Byte[],System.Boolean)
  id: SaveFileAsync(System.String,System.Byte[],System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: SaveFileAsync(string, byte[], bool)
  nameWithType: FileHelper.SaveFileAsync(string, byte[], bool)
  fullName: AetherUtils.Core.Files.FileHelper.SaveFileAsync(string, byte[], bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SaveFileAsync
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 182
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: >-
    Asynchronously create a new file and write the specified <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> array to it.

    If the file exists, it is overwritten.
  example: []
  syntax:
    content: public static void SaveFileAsync(string filePath, byte[] content, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path of the file to save.
    - id: content
      type: System.Byte[]
      description: The <xref href="System.Byte" data-throw-if-not-resolved="false"></xref>s to save to the file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before creating file?
    content.vb: Public Shared Sub SaveFileAsync(filePath As String, content As Byte(), expandPath As Boolean = True)
  overload: AetherUtils.Core.Files.FileHelper.SaveFileAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.SaveFileAsync(String, Byte(), Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.SaveFileAsync(String, Byte(), Boolean)
  name.vb: SaveFileAsync(String, Byte(), Boolean)
- uid: AetherUtils.Core.Files.FileHelper.ExpandPath(System.String)
  commentId: M:AetherUtils.Core.Files.FileHelper.ExpandPath(System.String)
  id: ExpandPath(System.String)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: ExpandPath(string)
  nameWithType: FileHelper.ExpandPath(string)
  fullName: AetherUtils.Core.Files.FileHelper.ExpandPath(string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: ExpandPath
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 200
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Expand a file path containing environment path variables, if possible.
  example: []
  syntax:
    content: public static string ExpandPath(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: The path to expand.
    return:
      type: System.String
      description: The expanded path, or the original path if no expansion was necessary.
    content.vb: Public Shared Function ExpandPath(filePath As String) As String
  overload: AetherUtils.Core.Files.FileHelper.ExpandPath*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.ExpandPath(String)
  fullName.vb: AetherUtils.Core.Files.FileHelper.ExpandPath(String)
  name.vb: ExpandPath(String)
- uid: AetherUtils.Core.Files.FileHelper.IsValidPath(System.String)
  commentId: M:AetherUtils.Core.Files.FileHelper.IsValidPath(System.String)
  id: IsValidPath(System.String)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: IsValidPath(string)
  nameWithType: FileHelper.IsValidPath(string)
  fullName: AetherUtils.Core.Files.FileHelper.IsValidPath(string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: IsValidPath
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 211
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Get whether the specified <code class="paramref">path</code> is a valid absolute file path on Windows.
  example: []
  syntax:
    content: public static bool IsValidPath(string path)
    parameters:
    - id: path
      type: System.String
      description: A path to check.
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsValidPath(path As String) As Boolean
  overload: AetherUtils.Core.Files.FileHelper.IsValidPath*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">path</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.IsValidPath(String)
  fullName.vb: AetherUtils.Core.Files.FileHelper.IsValidPath(String)
  name.vb: IsValidPath(String)
- uid: AetherUtils.Core.Files.FileHelper.RemoveInvalidFileNameChars(System.String)
  commentId: M:AetherUtils.Core.Files.FileHelper.RemoveInvalidFileNameChars(System.String)
  id: RemoveInvalidFileNameChars(System.String)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: RemoveInvalidFileNameChars(string)
  nameWithType: FileHelper.RemoveInvalidFileNameChars(string)
  fullName: AetherUtils.Core.Files.FileHelper.RemoveInvalidFileNameChars(string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: RemoveInvalidFileNameChars
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 227
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Remove the platform-specific invalid file name characters from the specified file name.
  example: []
  syntax:
    content: public static string RemoveInvalidFileNameChars(string fileName)
    parameters:
    - id: fileName
      type: System.String
      description: The filename.
    return:
      type: System.String
      description: A string with the invalid characters removed from the filename.
    content.vb: Public Shared Function RemoveInvalidFileNameChars(fileName As String) As String
  overload: AetherUtils.Core.Files.FileHelper.RemoveInvalidFileNameChars*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">fileName</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.RemoveInvalidFileNameChars(String)
  fullName.vb: AetherUtils.Core.Files.FileHelper.RemoveInvalidFileNameChars(String)
  name.vb: RemoveInvalidFileNameChars(String)
- uid: AetherUtils.Core.Files.FileHelper.RemoveInvalidPathChars(System.String)
  commentId: M:AetherUtils.Core.Files.FileHelper.RemoveInvalidPathChars(System.String)
  id: RemoveInvalidPathChars(System.String)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: RemoveInvalidPathChars(string)
  nameWithType: FileHelper.RemoveInvalidPathChars(string)
  fullName: AetherUtils.Core.Files.FileHelper.RemoveInvalidPathChars(string)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: RemoveInvalidPathChars
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 242
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Remove the platform-specific invalid path characters from the specified path.
  example: []
  syntax:
    content: public static string RemoveInvalidPathChars(string path)
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: System.String
      description: A string with the invalid characters removed from the path.
    content.vb: Public Shared Function RemoveInvalidPathChars(path As String) As String
  overload: AetherUtils.Core.Files.FileHelper.RemoveInvalidPathChars*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">path</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.RemoveInvalidPathChars(String)
  fullName.vb: AetherUtils.Core.Files.FileHelper.RemoveInvalidPathChars(String)
  name.vb: RemoveInvalidPathChars(String)
- uid: AetherUtils.Core.Files.FileHelper.DoesFileExist(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.DoesFileExist(System.String,System.Boolean)
  id: DoesFileExist(System.String,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: DoesFileExist(string, bool)
  nameWithType: FileHelper.DoesFileExist(string, bool)
  fullName: AetherUtils.Core.Files.FileHelper.DoesFileExist(string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: DoesFileExist
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 260
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Check if a file exists on the file system.
  example: []
  syntax:
    content: public static bool DoesFileExist(string filePath, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path to a file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before checking?
    return:
      type: System.Boolean
      description: <code>true</code> if the file exists; <code>false</code> otherwise.
    content.vb: Public Shared Function DoesFileExist(filePath As String, expandPath As Boolean = True) As Boolean
  overload: AetherUtils.Core.Files.FileHelper.DoesFileExist*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.DoesFileExist(String, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.DoesFileExist(String, Boolean)
  name.vb: DoesFileExist(String, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.DoesFolderExist(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.DoesFolderExist(System.String,System.Boolean)
  id: DoesFolderExist(System.String,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: DoesFolderExist(string, bool)
  nameWithType: FileHelper.DoesFolderExist(string, bool)
  fullName: AetherUtils.Core.Files.FileHelper.DoesFolderExist(string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: DoesFolderExist
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 275
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Check if a folder exists on the file system.
  example: []
  syntax:
    content: public static bool DoesFolderExist(string folderPath, bool expandPath = true)
    parameters:
    - id: folderPath
      type: System.String
      description: The path to a folder.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">folderPath</code> be expanded before checking?
    return:
      type: System.Boolean
      description: <code>true</code> if the folder exists; <code>false</code> otherwise.
    content.vb: Public Shared Function DoesFolderExist(folderPath As String, expandPath As Boolean = True) As Boolean
  overload: AetherUtils.Core.Files.FileHelper.DoesFolderExist*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">folderPath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.DoesFolderExist(String, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.DoesFolderExist(String, Boolean)
  name.vb: DoesFolderExist(String, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.GetExtension(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.GetExtension(System.String,System.Boolean)
  id: GetExtension(System.String,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: GetExtension(string, bool)
  nameWithType: FileHelper.GetExtension(string, bool)
  fullName: AetherUtils.Core.Files.FileHelper.GetExtension(string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetExtension
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 290
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Get the extension component, including the <code>.</code>, of a file name specified by <code class="paramref">filePath</code>.
  example: []
  syntax:
    content: public static string GetExtension(string filePath, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path to a file.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before accessing?
    return:
      type: System.String
      description: The file extension, including the <code>.</code>.
    content.vb: Public Shared Function GetExtension(filePath As String, expandPath As Boolean = True) As String
  overload: AetherUtils.Core.Files.FileHelper.GetExtension*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.GetExtension(String, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.GetExtension(String, Boolean)
  name.vb: GetExtension(String, Boolean)
- uid: AetherUtils.Core.Files.FileHelper.DeleteFile(System.String,System.Boolean)
  commentId: M:AetherUtils.Core.Files.FileHelper.DeleteFile(System.String,System.Boolean)
  id: DeleteFile(System.String,System.Boolean)
  parent: AetherUtils.Core.Files.FileHelper
  langs:
  - csharp
  - vb
  name: DeleteFile(string, bool)
  nameWithType: FileHelper.DeleteFile(string, bool)
  fullName: AetherUtils.Core.Files.FileHelper.DeleteFile(string, bool)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Files/FileHelper.cs
      branch: release
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: DeleteFile
    path: ../AetherUtils.Core/Files/FileHelper.cs
    startLine: 304
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Files
  summary: Delete the file, if it exists, specified by <code class="paramref">filePath</code>.
  example: []
  syntax:
    content: public static void DeleteFile(string filePath, bool expandPath = true)
    parameters:
    - id: filePath
      type: System.String
      description: The path to a file to delete.
    - id: expandPath
      type: System.Boolean
      description: Should the <code class="paramref">filePath</code> be expanded before accessing?
    content.vb: Public Shared Sub DeleteFile(filePath As String, expandPath As Boolean = True)
  overload: AetherUtils.Core.Files.FileHelper.DeleteFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the <code class="paramref">filePath</code> was <code>null</code> or empty.
  nameWithType.vb: FileHelper.DeleteFile(String, Boolean)
  fullName.vb: AetherUtils.Core.Files.FileHelper.DeleteFile(String, Boolean)
  name.vb: DeleteFile(String, Boolean)
references:
- uid: AetherUtils.Core.Files
  commentId: N:AetherUtils.Core.Files
  href: AetherUtils.html
  name: AetherUtils.Core.Files
  nameWithType: AetherUtils.Core.Files
  fullName: AetherUtils.Core.Files
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Files
    name: Files
    href: AetherUtils.Core.Files.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Files
    name: Files
    href: AetherUtils.Core.Files.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: AetherUtils.Core.Files.FileHelper.CreateDirectories*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.CreateDirectories
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_CreateDirectories_System_String_System_Boolean_
  name: CreateDirectories
  nameWithType: FileHelper.CreateDirectories
  fullName: AetherUtils.Core.Files.FileHelper.CreateDirectories
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: AetherUtils.Core.Files.FileHelper.SaveFile*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.SaveFile
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_SaveFile_System_String_System_String_System_Boolean_
  name: SaveFile
  nameWithType: FileHelper.SaveFile
  fullName: AetherUtils.Core.Files.FileHelper.SaveFile
- uid: System.String.Empty
  commentId: F:System.String.Empty
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string.empty
  name: Empty
  nameWithType: string.Empty
  fullName: string.Empty
  nameWithType.vb: String.Empty
  fullName.vb: String.Empty
- uid: AetherUtils.Core.Files.FileHelper.OpenFile*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.OpenFile
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_OpenFile_System_String_System_Boolean_
  name: OpenFile
  nameWithType: FileHelper.OpenFile
  fullName: AetherUtils.Core.Files.FileHelper.OpenFile
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: AetherUtils.Core.Files.FileHelper.OpenFileAsync*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.OpenFileAsync
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_OpenFileAsync_System_String_System_Boolean_
  name: OpenFileAsync
  nameWithType: FileHelper.OpenFileAsync
  fullName: AetherUtils.Core.Files.FileHelper.OpenFileAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Byte
  commentId: T:System.Byte
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: AetherUtils.Core.Files.FileHelper.OpenNonTextFile*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.OpenNonTextFile
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_OpenNonTextFile_System_String_System_Boolean_
  name: OpenNonTextFile
  nameWithType: FileHelper.OpenNonTextFile
  fullName: AetherUtils.Core.Files.FileHelper.OpenNonTextFile
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: AetherUtils.Core.Files.FileHelper.OpenNonTextFileAsync*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.OpenNonTextFileAsync
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_OpenNonTextFileAsync_System_String_System_Boolean_
  name: OpenNonTextFileAsync
  nameWithType: FileHelper.OpenNonTextFileAsync
  fullName: AetherUtils.Core.Files.FileHelper.OpenNonTextFileAsync
- uid: System.Threading.Tasks.Task{System.Byte[]}
  commentId: T:System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<byte[]>
  nameWithType: Task<byte[]>
  fullName: System.Threading.Tasks.Task<byte[]>
  nameWithType.vb: Task(Of Byte())
  fullName.vb: System.Threading.Tasks.Task(Of Byte())
  name.vb: Task(Of Byte())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.encoding
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
- uid: AetherUtils.Core.Files.FileHelper.SaveFileAsync*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.SaveFileAsync
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_SaveFileAsync_System_String_System_String_System_Boolean_
  name: SaveFileAsync
  nameWithType: FileHelper.SaveFileAsync
  fullName: AetherUtils.Core.Files.FileHelper.SaveFileAsync
- uid: AetherUtils.Core.Files.FileHelper.ExpandPath*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.ExpandPath
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_ExpandPath_System_String_
  name: ExpandPath
  nameWithType: FileHelper.ExpandPath
  fullName: AetherUtils.Core.Files.FileHelper.ExpandPath
- uid: AetherUtils.Core.Files.FileHelper.IsValidPath*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.IsValidPath
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_IsValidPath_System_String_
  name: IsValidPath
  nameWithType: FileHelper.IsValidPath
  fullName: AetherUtils.Core.Files.FileHelper.IsValidPath
- uid: AetherUtils.Core.Files.FileHelper.RemoveInvalidFileNameChars*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.RemoveInvalidFileNameChars
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_RemoveInvalidFileNameChars_System_String_
  name: RemoveInvalidFileNameChars
  nameWithType: FileHelper.RemoveInvalidFileNameChars
  fullName: AetherUtils.Core.Files.FileHelper.RemoveInvalidFileNameChars
- uid: AetherUtils.Core.Files.FileHelper.RemoveInvalidPathChars*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.RemoveInvalidPathChars
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_RemoveInvalidPathChars_System_String_
  name: RemoveInvalidPathChars
  nameWithType: FileHelper.RemoveInvalidPathChars
  fullName: AetherUtils.Core.Files.FileHelper.RemoveInvalidPathChars
- uid: AetherUtils.Core.Files.FileHelper.DoesFileExist*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.DoesFileExist
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_DoesFileExist_System_String_System_Boolean_
  name: DoesFileExist
  nameWithType: FileHelper.DoesFileExist
  fullName: AetherUtils.Core.Files.FileHelper.DoesFileExist
- uid: AetherUtils.Core.Files.FileHelper.DoesFolderExist*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.DoesFolderExist
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_DoesFolderExist_System_String_System_Boolean_
  name: DoesFolderExist
  nameWithType: FileHelper.DoesFolderExist
  fullName: AetherUtils.Core.Files.FileHelper.DoesFolderExist
- uid: AetherUtils.Core.Files.FileHelper.GetExtension*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.GetExtension
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_GetExtension_System_String_System_Boolean_
  name: GetExtension
  nameWithType: FileHelper.GetExtension
  fullName: AetherUtils.Core.Files.FileHelper.GetExtension
- uid: AetherUtils.Core.Files.FileHelper.DeleteFile*
  commentId: Overload:AetherUtils.Core.Files.FileHelper.DeleteFile
  href: AetherUtils.Core.Files.FileHelper.html#AetherUtils_Core_Files_FileHelper_DeleteFile_System_String_System_Boolean_
  name: DeleteFile
  nameWithType: FileHelper.DeleteFile
  fullName: AetherUtils.Core.Files.FileHelper.DeleteFile
shouldSkipMarkup: true
