### YamlMime:ManagedReference
items:
- uid: AetherUtils.Core.Extensions.TypeExtensions
  commentId: T:AetherUtils.Core.Extensions.TypeExtensions
  id: TypeExtensions
  parent: AetherUtils.Core.Extensions
  children:
  - AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  - AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  - AetherUtils.Core.Extensions.TypeExtensions.GetFriendlyName(System.Type)
  - AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  - AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  langs:
  - csharp
  - vb
  name: TypeExtensions
  nameWithType: TypeExtensions
  fullName: AetherUtils.Core.Extensions.TypeExtensions
  type: Class
  source:
    remote:
      path: AetherUtils.Core/Extensions/TypeExtensions.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: TypeExtensions
    path: ../AetherUtils.Core/Extensions/TypeExtensions.cs
    startLine: 13
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Extensions
  summary: Provides extension methods for manipulating generic object types.
  example: []
  syntax:
    content: public static class TypeExtensions
    content.vb: Public Module TypeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: AetherUtils.Core.Extensions.TypeExtensions.GetFriendlyName(System.Type)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.GetFriendlyName(System.Type)
  id: GetFriendlyName(System.Type)
  isExtensionMethod: true
  parent: AetherUtils.Core.Extensions.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetFriendlyName(Type)
  nameWithType: TypeExtensions.GetFriendlyName(Type)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.GetFriendlyName(System.Type)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Extensions/TypeExtensions.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: GetFriendlyName
    path: ../AetherUtils.Core/Extensions/TypeExtensions.cs
    startLine: 21
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Extensions
  summary: Get the friendly, displayable name for the <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static string GetFriendlyName(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> to get the name of.
    return:
      type: System.String
      description: The friendly name for the <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function GetFriendlyName(type As Type) As String
  overload: AetherUtils.Core.Extensions.TypeExtensions.GetFriendlyName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code class="paramref">type</code> was <code>null</code>.
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeXml``1(``0)
  id: SerializeXml``1(``0)
  isExtensionMethod: true
  parent: AetherUtils.Core.Extensions.TypeExtensions
  langs:
  - csharp
  - vb
  name: SerializeXml<T>(T)
  nameWithType: TypeExtensions.SerializeXml<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml<T>(T)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Extensions/TypeExtensions.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SerializeXml
    path: ../AetherUtils.Core/Extensions/TypeExtensions.cs
    startLine: 37
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Extensions
  summary: Serializes a .NET object to an XML string.
  example: []
  syntax:
    content: 'public static string SerializeXml<T>(this T obj) where T : class'
    parameters:
    - id: obj
      type: '{T}'
      description: An instance of <code class="typeparamref">T</code> to serialize.
    typeParameters:
    - id: T
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the object to serialize.
    return:
      type: System.String
      description: An XML string representing the serialized object, <code class="paramref">obj</code>.
    content.vb: Public Shared Function SerializeXml(Of T As Class)(obj As T) As String
  overload: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code class="paramref">obj</code> was <code>null</code>.
  nameWithType.vb: TypeExtensions.SerializeXml(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml(Of T)(T)
  name.vb: SerializeXml(Of T)(T)
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.SerializeJson``1(``0)
  id: SerializeJson``1(``0)
  isExtensionMethod: true
  parent: AetherUtils.Core.Extensions.TypeExtensions
  langs:
  - csharp
  - vb
  name: SerializeJson<T>(T)
  nameWithType: TypeExtensions.SerializeJson<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson<T>(T)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Extensions/TypeExtensions.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: SerializeJson
    path: ../AetherUtils.Core/Extensions/TypeExtensions.cs
    startLine: 54
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Extensions
  summary: Serializes a .NET object to a JSON string.
  example: []
  syntax:
    content: 'public static string SerializeJson<T>(this T obj) where T : class'
    parameters:
    - id: obj
      type: '{T}'
      description: An instance of <code class="typeparamref">T</code> to serialize.
    typeParameters:
    - id: T
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the object to serialize.
    return:
      type: System.String
      description: A JSON string representing the serialized object, <code class="paramref">obj</code>.
    content.vb: Public Shared Function SerializeJson(Of T As Class)(obj As T) As String
  overload: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code class="paramref">obj</code> was <code>null</code>.
  nameWithType.vb: TypeExtensions.SerializeJson(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson(Of T)(T)
  name.vb: SerializeJson(Of T)(T)
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml``1(``0)
  id: CanSerializeXml``1(``0)
  isExtensionMethod: true
  parent: AetherUtils.Core.Extensions.TypeExtensions
  langs:
  - csharp
  - vb
  name: CanSerializeXml<T>(T)
  nameWithType: TypeExtensions.CanSerializeXml<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml<T>(T)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Extensions/TypeExtensions.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: CanSerializeXml
    path: ../AetherUtils.Core/Extensions/TypeExtensions.cs
    startLine: 69
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Extensions
  summary: Get a value indicating if this object can be serialized via XML serialization.
  example: []
  syntax:
    content: 'public static bool CanSerializeXml<T>(this T obj) where T : class'
    parameters:
    - id: obj
      type: '{T}'
      description: The instance of the object with type <code class="typeparamref">T</code>.
    typeParameters:
    - id: T
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the object to check.
    return:
      type: System.Boolean
      description: <code>true</code> if the object can be serialized; <code>false</code> otherwise.
    content.vb: Public Shared Function CanSerializeXml(Of T As Class)(obj As T) As Boolean
  overload: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code class="paramref">obj</code> was <code>null</code>.
  nameWithType.vb: TypeExtensions.CanSerializeXml(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml(Of T)(T)
  name.vb: CanSerializeXml(Of T)(T)
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  commentId: M:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson``1(``0)
  id: CanSerializeJson``1(``0)
  isExtensionMethod: true
  parent: AetherUtils.Core.Extensions.TypeExtensions
  langs:
  - csharp
  - vb
  name: CanSerializeJson<T>(T)
  nameWithType: TypeExtensions.CanSerializeJson<T>(T)
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson<T>(T)
  type: Method
  source:
    remote:
      path: AetherUtils.Core/Extensions/TypeExtensions.cs
      branch: master
      repo: https://github.com/ethan-hann/AetherUtils.git
    id: CanSerializeJson
    path: ../AetherUtils.Core/Extensions/TypeExtensions.cs
    startLine: 88
  assemblies:
  - AetherUtils.Core
  namespace: AetherUtils.Core.Extensions
  summary: Get a value indicating if this object can be serialized via JSON serializion.
  example: []
  syntax:
    content: 'public static bool CanSerializeJson<T>(this T obj) where T : class'
    parameters:
    - id: obj
      type: '{T}'
      description: The instance of the object with type <code class="typeparamref">T</code>.
    typeParameters:
    - id: T
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the object to check.
    return:
      type: System.Boolean
      description: <code>true</code> if the object can be serialized; <code>false</code> otherwise.
    content.vb: Public Shared Function CanSerializeJson(Of T As Class)(obj As T) As Boolean
  overload: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code class="paramref">obj</code> was <code>null</code>.
  nameWithType.vb: TypeExtensions.CanSerializeJson(Of T)(T)
  fullName.vb: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson(Of T)(T)
  name.vb: CanSerializeJson(Of T)(T)
references:
- uid: AetherUtils.Core.Extensions
  commentId: N:AetherUtils.Core.Extensions
  href: AetherUtils.html
  name: AetherUtils.Core.Extensions
  nameWithType: AetherUtils.Core.Extensions
  fullName: AetherUtils.Core.Extensions
  spec.csharp:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Extensions
    name: Extensions
    href: AetherUtils.Core.Extensions.html
  spec.vb:
  - uid: AetherUtils
    name: AetherUtils
    href: AetherUtils.html
  - name: .
  - uid: AetherUtils.Core
    name: Core
    href: AetherUtils.Core.html
  - name: .
  - uid: AetherUtils.Core.Extensions
    name: Extensions
    href: AetherUtils.Core.Extensions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: AetherUtils.Core.Extensions.TypeExtensions.GetFriendlyName*
  commentId: Overload:AetherUtils.Core.Extensions.TypeExtensions.GetFriendlyName
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_GetFriendlyName_System_Type_
  name: GetFriendlyName
  nameWithType: TypeExtensions.GetFriendlyName
  fullName: AetherUtils.Core.Extensions.TypeExtensions.GetFriendlyName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml*
  commentId: Overload:AetherUtils.Core.Extensions.TypeExtensions.SerializeXml
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeXml__1___0_
  name: SerializeXml
  nameWithType: TypeExtensions.SerializeXml
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeXml
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson*
  commentId: Overload:AetherUtils.Core.Extensions.TypeExtensions.SerializeJson
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_SerializeJson__1___0_
  name: SerializeJson
  nameWithType: TypeExtensions.SerializeJson
  fullName: AetherUtils.Core.Extensions.TypeExtensions.SerializeJson
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml*
  commentId: Overload:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeXml__1___0_
  name: CanSerializeXml
  nameWithType: TypeExtensions.CanSerializeXml
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeXml
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson*
  commentId: Overload:AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson
  href: AetherUtils.Core.Extensions.TypeExtensions.html#AetherUtils_Core_Extensions_TypeExtensions_CanSerializeJson__1___0_
  name: CanSerializeJson
  nameWithType: TypeExtensions.CanSerializeJson
  fullName: AetherUtils.Core.Extensions.TypeExtensions.CanSerializeJson
shouldSkipMarkup: true
